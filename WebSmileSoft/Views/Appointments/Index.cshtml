@{
    ViewData["Title"] = "Gestion de Citas";
}

<div id="GestiondeCitas" class="mb-3">
</div>



@section Scripts{
    <script>
        function abrirCita() { window.location.href = '@Url.Action("AdministrarCitas", "Doctor")' } function changeDateStatus(t, e) { $.ajax({ url: sessionStorage.urlEP + "/api/Appointments/v1/UpdateAppointmentStatus", type: "GET", data: { aID: e, asID: t }, contentType: "application/json", dataType: "json", success: function (t) { 0 == t.codeStatus ? Swal.fire({ title: t.messageStatus, icon: "info", confirmButtonText: "Aceptar" }).then(t => { t.isConfirmed && (swal.close(), location.reload()) }) : -1 == t.codeStatus && Swal.fire({ title: "Error", text: t.messageStatus, icon: "error", confirmButtonText: "Aceptar" }) }, error: function (t) { console.log("Error al obtener los detalles del usuario.") } }).then(t => { t.isConfirmed && location.reload() }) } function mostrarCargando() { Swal.fire({ title: "Cargando", text: "Por favor, espere un momento...", showCancelButton: !1, showConfirmButton: !1, allowOutsideClick: !1, onBeforeOpen: () => { Swal.showLoading() } }) } function fncheckDoctor(t) { t = t.value; 0 == t ? document.getElementById("cDoctor").disabled = !0 : (fngetDoctors(t), document.getElementById("cDoctor").disabled = !1) } function obtenerFechaActualSinUTC(t) { return new Date(t.getTime() - 6e4 * t.getTimezoneOffset()).toISOString().split("T")[0] } function validarFecha() { var t = obtenerFechaActualSinUTC(new Date), e = (console.log(t), obtenerFechaActualSinUTC(new Date(document.getElementById("fecha").value + "T05:00:00Z"))); console.log(e), e < t && (Swal.fire({ icon: "info", title: "Oops...", text: "La fecha no puede ser menor que hoy.", confirmButtonColor: "#008dc9" }), document.getElementById("fecha").value = "") } function validarHora() { var t = document.getElementById("cHora").value, e = (new Date).getUTCHours(), a = new Date; a.setUTCHours(a.getUTCHours() + 2), (t < e || t < "08:00" || "17:00" < t || t > a.getUTCHours()) && (Swal.fire({ icon: "info", title: "Oops...", text: "La hora debe estar entre las 08:00 AM y las 5:00 PM y puede ser maximo 2 horas antes de la cita.", confirmButtonColor: "#008dc9" }), document.getElementById("cHora").value = "") } function fngetDoctors(t) { $.ajax({ type: "GET", url: "@ViewBag.urlEndPoint/api/Generics/v1/GetDoctors?spID=" + t, contentType: "application/json", success: function (t) { var e = document.getElementById("cDoctor"), a = (e.options.length = 0, document.createElement("option")); a.value = 0, a.text = "Seleccionar Doctor", e.appendChild(a); for (var o = 0; o < t.length; o++)(a = document.createElement("option")).value = t[o].value, a.text = t[o].text, e.appendChild(a) }, error: function (t) { Swal.fire({ icon: "error", title: "Oops...", text: "Se presento un error al obtener la información", confirmButtonColor: "#008dc9" }) } }) } function showTimePicker() { document.getElementById("timePicker").style.display = "block" } function setSelectedTime() { var t = document.getElementById("hour").value; document.getElementById("cHora").value = t + ":00", document.getElementById("timePicker").style.display = "none" } function getUserCitas(t) { mostrarCargando(), $.ajax({ url: sessionStorage.urlEP + "/api/Appointments/v1/GetAppointmentsList", type: "GET", data: { uID: t }, contentType: "application/json", dataType: "json", success: function (t) { $("#loadingScreen").hide(); let o = []; t.itemJson; null == t && $("#loadingScreen").hide(), $.each(t.itemJson, function (t, e) { var a = e.aDate.substring(0, 10), t = [t + 1, e.aID, e.uName, e.uCellphone, e.uDoctorName, e.aDescription, a, e.aTime, e.asName]; o.push(t) }), tableCitas = $("#citasUsuario").DataTable({ columns: [{ title: "#" }, { title: "ID", visible: !1 }, { title: "Nombre" }, { title: "Celular" }, { title: "Doctor" }, { title: "Motivo" }, { title: "Fecha" }, { title: "Hora" }, { title: "Estado" }, { title: "Acciones", orderable: !1, data: null, defaultContent: '<button class="btn btn-primary btn-sm btnDesactivarC" data-toggle="tooltip" title="Cancelar Cita" type="button"> <i class="fas fa-ban"> </i></button> <button class="btn btn-danger btn-sm btnEditarC" data-toggle="modal" data-target="#editarCitaModal" data-toggle="tooltip" title="Reprogramar Cita" style="display: none"> <i class="fa-regular fa-pen-to-square"></i></button> ' }], data: o, dom: "Bfrtip", buttons: { buttons: [{ extend: "print", className: "btn btn-sm", messageTop: "Citas SmileSoft" }] }, paging: !1, select: !0, destroy: !0, language: { url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json" }, createdRow: function (t, e, a) { "Cancelado" === e[8] && $(t).find(".btnDesactivarC, .btnEditarC").hide() } }), Swal.close(), tableCitas.column(9).nodes().to$().find(".btnDesactivarC").click(function () { var t = tableCitas.row($(this).parents("tr")).data(); let e = t[1]; t = t[8]; "Realizado" == t ? Swal.fire({ icon: "info", title: "Oops...", text: "La cita ya fue realizada, no se puede cancelar.", confirmButtonColor: "#008dc9" }) : "Cancelado" == t ? Swal.fire({ icon: "info", title: "Oops...", text: "La cita ya fue cancelada.", confirmButtonColor: "#008dc9" }) : "Confirmado" == t ? Swal.fire({ icon: "info", title: "Oops...", text: "La cita ya fue confirmada, no se puede cancelar.", confirmButtonColor: "#008dc9" }) : "Pendiente" == t && Swal.fire({ title: "Cancelar Cita", text: "¿Está seguro que desea cancelar la cita?", icon: "warning", showCancelButton: !0, confirmButtonText: "Si, Cancelar Cita", cancelButtonText: "Cancelar" }).then(t => { t.isConfirmed && $.ajax({ url: sessionStorage.urlEP + "/api/Appointments/v1/UpdateAppointmentStatus", type: "GET", data: { aID: e, asID: 4 }, contentType: "application/json", dataType: "json", success: function (t) { 0 == t.codeStatus ? Swal.fire({ title: "Cita Cancelada", text: "La cita ha sido Cancelada exitosamente.", icon: "success", confirmButtonText: "Aceptar" }).then(t => { t.isConfirmed && location.reload() }) : -1 == t.codeStatus && Swal.fire({ title: "Error", text: t.messageStatus, icon: "error", confirmButtonText: "Aceptar" }) }, error: function (t) { console.log("Error al obtener los detalles del usuario.") } }).then(t => { t.isConfirmed && location.reload() }) }) }), tableCitas.column(9).nodes().to$().find(".btnEditarC").click(function () { let e = tableCitas.row($(this).parents("tr")).data()[1]; Swal.fire({ title: "Reprogramar Cita", text: "¿Está seguro que desea reprogramar la cita?", icon: "warning", showCancelButton: !0, confirmButtonText: "Si, reprogramar", cancelButtonText: "Cancelar" }).then(t => { t.isConfirmed && $.ajax({ url: sessionStorage.urlEP + "/api/Appointments/v1/UpdateAppointmentStatus", type: "POST", data: { aID: e }, contentType: "application/json", dataType: "json", success: function (t) { 0 == t.codeStatus ? Swal.fire({ title: "Cita Cancelada", text: "La cita ha sido Cancelada exitosamente.", icon: "success", confirmButtonText: "Aceptar" }).then(t => { t.isConfirmed && location.reload() }) : -1 == t.codeStatus && Swal.fire({ title: "Error", text: t.messageStatus, icon: "error", confirmButtonText: "Aceptar" }) }, error: function (t) { console.log("Error al obtener los detalles del usuario.") } }).then(t => { t.isConfirmed && location.reload() }) }) }) } }) } function SolicitarCitaPaciente() { var t = document.getElementById("fecha").value.trim(), e = document.getElementById("cHora").value.trim() + ":00", a = document.getElementById("cDoctor").value.trim(), o = document.getElementById("mensaje").value.trim(), t = { uID: parseInt(sessionStorage.getItem("userID")), utID: 3, oID: 1, uName: sessionStorage.getItem("userFName"), ulastName: sessionStorage.getItem("userLName"), uDocument: sessionStorage.getItem("userDocument"), dtID: parseInt(sessionStorage.getItem("usertDocument")), uBirthDate: sessionStorage.getItem("userBirthDate"), gID: parseInt(sessionStorage.getItem("userGender")), uEmailAddress: sessionStorage.getItem("userEmail"), uCellphone: sessionStorage.getItem("userPhone"), asID: 0, aID: 0, aDate: t, aTime: e, dID: parseInt(a), aDescription: o }; "" == t.aDate || "" == t.aTime || 0 == t.dID || "" == t.aDescription ? Swal.fire({ icon: "info", title: "Oops...", text: "Por favor ingrese todos los datos.", confirmButtonColor: "#008dc9" }) : 0 == t.dID ? Swal.fire({ icon: "info", title: "Oops...", text: "Por favor seleccione una Especialidad y un doctor.", confirmButtonColor: "#008dc9" }) : $.ajax({ type: "POST", url: "@ViewBag.urlEndPoint/api/Appointments/v1/SetAppointment", data: JSON.stringify(t), contentType: "application/json", success: function (t) { console.log(t.OutputCodeError), "0" === t.codeStatus ? Swal.fire({ icon: "success", title: "Cita Solicitada con éxito", confirmButtonColor: "#008dc9", allowOutsideClick: !1, allowEscapeKey: !1 }).then(t => { t.isConfirmed && location.reload() }) : "-1" === t.codeStatus && Swal.fire({ icon: "info", title: "Oops...", text: t.messageStatus, confirmButtonColor: "#008dc9" }).then(t => { t.isConfirmed && location.reload() }) }, error: function (t) { Swal.fire({ icon: "error", title: "Oops...", text: "Se presento un error al guardar la información", confirmButtonColor: "#008dc9" }) } }) } $(document).ready(function () { var t = sessionStorage.getItem("userRole"); $.ajax({ type: "GET", url: "/Appointments/GetPartialViewByRole?role=" + t, success: function (t) { $("#GestiondeCitas").html(t) }, error: function (t) { console.error("Error al obtener la vista parcial: " + t) } }) }), $.ajax({ url: sessionStorage.urlEP + "/api/Appointments/v1/GetAppointmentsList", type: "GET", contentType: "application/json", dataType: "json", success: function (t) { $("#loadingScreen").hide(); let o = []; $.each(t.itemJson, function (t, e) { var a = e.aDate.substring(0, 10), t = [t + 1, e.aID, a, e.uName, e.uCellphone, e.uDoctorName, e.aDescription, e.aTime, e.asName]; o.push(t) }), console.log(o), tablecitasd = $("#citasDoctor").DataTable({ columnDefs: [{ target: 0, visible: !0, searchable: !0 }], columns: [{ title: "#" }, { title: "IdCita", visible: !1 }, { title: "Fecha" }, { title: "Nombre" }, { title: "Celular" }, { title: "Doctor" }, { title: "Motivo" }, { title: "Hora" }, { title: "Estado" }, { title: "Acciones", orderable: !1, data: null, defaultContent: '<button class="btn btn-primary btn-sm btnDesactivarC" data-toggle="tooltip" title="Cancelar Cita" type="button"> <i class="fas fa-ban"> </i></button> <button class="btn btn-warning btn-sm btnEditarC" data-toggle="modal" data-toggle="tooltip" title="Cambiar Estado de la Cita"> <i class="fa-regular fa-pen-to-square"></i></button> ' }], data: o, dom: "Bfrtip", buttons: { buttons: [{ extend: "print", className: "btn btn-sm", messageTop: "Tabla de Citas Programadas" }] }, select: !0, destroy: !0, language: { url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json" }, createdRow: function (t, e, a) { "Cancelado" === e[8] && $(t).find(".btnDesactivarC, .btnEditarC").hide() } }), Swal.close(), tablecitasd.column(9).nodes().to$().find(".btnDesactivarC").click(function () { var t = tablecitasd.row($(this).parents("tr")).data(); let e = t[1]; t = t[8]; "Realizado" == t ? Swal.fire({ icon: "info", title: "Oops...", text: "La cita ya fue realizada, no se puede cancelar.", confirmButtonColor: "#008dc9" }) : "Cancelado" == t ? Swal.fire({ icon: "info", title: "Oops...", text: "La cita ya fue cancelada.", confirmButtonColor: "#008dc9" }) : "Confirmado" == t ? Swal.fire({ icon: "info", title: "Oops...", text: "La cita ya fue confirmada, no se puede cancelar.", confirmButtonColor: "#008dc9" }) : "Pendiente" == t && Swal.fire({ title: "Cancelar Cita", text: "¿Está seguro que desea cancelar la cita?", icon: "warning", showCancelButton: !0, confirmButtonText: "Si, Cancelar Cita", cancelButtonText: "Atrás" }).then(t => { t.isConfirmed && $.ajax({ url: sessionStorage.urlEP + "/api/Appointments/v1/UpdateAppointmentStatus", type: "GET", data: { aID: e, asID: 4 }, contentType: "application/json", dataType: "json", success: function (t) { 0 == t.codeStatus ? Swal.fire({ title: "Cita Cancelada", text: "La cita ha sido Cancelada exitosamente.", icon: "success", confirmButtonText: "Aceptar" }).then(t => { t.isConfirmed && location.reload() }) : -1 == t.codeStatus && Swal.fire({ title: "Error", text: t.messageStatus, icon: "error", confirmButtonText: "Aceptar" }) }, error: function (t) { console.log("Error al obtener los detalles del usuario.") } }).then(t => { t.isConfirmed && location.reload() }) }) }), tablecitasd.column(9).nodes().to$().find(".btnEditarC").click(async function () { let a = tablecitasd.row($(this).parents("tr")).data()[1]; var { } = await Swal.fire({ title: "Seleccionar estado de la cita", input: "select", inputOptions: { 1: "Pendiente", 2: "Confirmada", 3: "Completada" }, inputPlaceholder: "Selecciona el estado de la cita", showCancelButton: !0, inputValidator: e => new Promise(t => { 0 < e ? changeDateStatus(e, a) : t("Debes seleccionar un estado de cita.") }) }) }) }, error: function (t) { console.log("Error al obtener los detalles del usuario.") } }), $(document).ready(function () { $('[data-toggle="tooltip"]').tooltip() }), $("#fecha").on("change", function () { validarFecha() }), $("#cHora").on("change", function () { validarHora() }), $(document).ready(function () { getUserCitas(sessionStorage.getItem("userID")), $("#loadingScreen").show() }), $(document).ready(function () { $('[data-toggle="tooltip"]').tooltip() });
    </script>
    
    @* <script>
        $(document).ready(function () {
            // Verifica el rol del usuario almacenado en sessionStorage
            let userRole = sessionStorage.getItem('userRole');

            // URL del controlador que maneja las vistas parciales basadas en el rol
            let url = '/Appointments/GetPartialViewByRole?role=' + userRole;

            // Realiza una solicitud AJAX para obtener la vista parcial correspondiente
            $.ajax({
                type: 'GET',
                url: url,
                success: function (response) {
                    // Reemplaza el contenido del elemento con la vista parcial
                    $("#GestiondeCitas").html(response);
                },
                error: function (error) {
                    console.error('Error al obtener la vista parcial: ' + error);
                }
            });
        });

        function abrirCita() {
            window.location.href = '@Url.Action("AdministrarCitas", "Doctor")';
        } //SetAppointment
        $.ajax({
            url: sessionStorage.urlEP + '/api/Appointments/v1/GetAppointmentsList',
            type: 'GET',
            contentType: "application/json",
            dataType: 'json',
            success: function (data) {
                $("#loadingScreen").hide();
                let dataSet = [];

                $.each(data.itemJson, function (index, cita) {
                    let fechaCita = cita.aDate;
                    let fechaFormateada = fechaCita.substring(0, 10);
                    let rowData = [
                        index + 1,
                        cita.aID,
                        fechaFormateada,
                        cita.uName,
                        cita.uCellphone,
                        cita.uDoctorName,
                        cita.aDescription,
                        cita.aTime,
                        cita.asName
                    ];
                    dataSet.push(rowData);
                });
                console.log(dataSet);
                // Inicializa o actualiza el DataTable con los datos procesados
                tablecitasd = $('#citasDoctor').DataTable({
                    columnDefs: [
                        {
                            target: 0,
                            visible: true,
                            searchable: true
                        }
                    ],
                    columns: [
                        { title: '#' },
                        { title: 'IdCita', visible: false },
                        { title: 'Fecha' },
                        { title: 'Nombre' },
                        { title: 'Celular' },
                        { title: 'Doctor' },
                        { title: 'Motivo' },
                        { title: 'Hora' },
                        { title: 'Estado' },
                        {
                            title: 'Acciones',
                            orderable: false, // Para desactivar la ordenación en esta columna
                            data: null, // Usaremos la columna "Acciones" solo para botones
                            defaultContent: '<button class="btn btn-primary btn-sm btnDesactivarC" data-toggle="tooltip" title="Cancelar Cita" type="button"> <i class="fas fa-ban"> </i></button> ' +
                                '<button class="btn btn-warning btn-sm btnEditarC" data-toggle="modal" data-toggle="tooltip" title="Cambiar Estado de la Cita"> <i class="fa-regular fa-pen-to-square"></i></button> '
                        }
                    ],
                    data: dataSet,
                    dom: 'Bfrtip',
                    buttons: {
                        buttons: [
                            {
                                extend: 'print', className: 'btn btn-sm',
                                messageTop: 'Tabla de Citas Programadas',
                            },
                        ]
                    },
                    select: true,
                    destroy: true,
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
                    },
                    createdRow: function (row, data, dataIndex) {
                        // Obtén el valor del estado en la columna "Estado"
                        var estado = data[8]; // Asegúrate de que 8 sea el índice correcto para la columna "Estado"

                        // Si el estado es "cancelado", oculta los botones en esta fila
                        if (estado === 'Cancelado') {
                            $(row).find('.btnDesactivarC, .btnEditarC').hide();
                        }
                    }
                });

                Swal.close();

                tablecitasd.column(9).nodes().to$().find('.btnDesactivarC').click(function () {
                    // Maneja la acción del botón aqui
                    let data = tablecitasd.row($(this).parents('tr')).data();
                    let CitaID = data[1]; // la primera columna contiene el ID del usuario
                    let CitaEstado = data[8];
                    if (CitaEstado == "Realizado") {
                        Swal.fire({
                            icon: 'info',
                            title: 'Oops...',
                            text: 'La cita ya fue realizada, no se puede cancelar.',
                            confirmButtonColor: '#008dc9'
                        })
                    } else if (CitaEstado == "Cancelado") {
                        Swal.fire({
                            icon: 'info',
                            title: 'Oops...',
                            text: 'La cita ya fue cancelada.',
                            confirmButtonColor: '#008dc9'
                        })
                    } else if (CitaEstado == "Confirmado") {
                        Swal.fire({
                            icon: 'info',
                            title: 'Oops...',
                            text: 'La cita ya fue confirmada, no se puede cancelar.',
                            confirmButtonColor: '#008dc9'
                        })
                    } else if (CitaEstado == "Pendiente") {
                        Swal.fire({
                            title: 'Cancelar Cita',
                            text: '¿Está seguro que desea cancelar la cita?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Si, Cancelar Cita',
                            cancelButtonText: 'Atrás'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $.ajax({
                                    url: sessionStorage.urlEP + '/api/Appointments/v1/UpdateAppointmentStatus',
                                    type: 'GET',
                                    data: { 'aID': CitaID, 'asID': 4 },
                                    contentType: "application/json",
                                    dataType: 'json',
                                    success: function (response) {
                                        if (response.codeStatus == 0) {
                                            Swal.fire({
                                                title: 'Cita Cancelada',
                                                text: 'La cita ha sido Cancelada exitosamente.',
                                                icon: 'success',
                                                confirmButtonText: 'Aceptar'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    location.reload();
                                                }
                                            })
                                        }
                                        else if (response.codeStatus == -1) {
                                            Swal.fire({
                                                title: 'Error',
                                                text: response.messageStatus,
                                                icon: 'error',
                                                confirmButtonText: 'Aceptar'
                                            })
                                        }

                                    },
                                    error: function (error) {
                                        console.log('Error al obtener los detalles del usuario.');
                                    }

                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        location.reload();
                                    }
                                })
                            }
                        })
                    }

                });
                tablecitasd.column(9).nodes().to$().find('.btnEditarC').click(async function () {
                    // Maneja la acción del botón aqui
                    let data = tablecitasd.row($(this).parents('tr')).data();
                    let CitaID = data[1]; // la primera columna contiene el ID del usuario

                    const { value: citaState } = await Swal.fire({
                        title: 'Seleccionar estado de la cita',
                        input: 'select',
                        inputOptions: {
                            '1': 'Pendiente',
                            '2': 'Confirmada',
                            '3': 'Completada'
                        },
                        inputPlaceholder: 'Selecciona el estado de la cita',
                        showCancelButton: true,
                        inputValidator: (value) => {
                            return new Promise((resolve) => {
                                if (value > 0) {
                                    // alert(value);
                                    //resolve(value); // Si se selecciona un estado, resolvemos con ese valor
                                    changeDateStatus(value, CitaID);
                                } else {
                                    resolve('Debes seleccionar un estado de cita.');
                                }
                            });
                        }
                    });

                });
            },
            error: function (error) {
                console.log('Error al obtener los detalles del usuario.');
            }
        });
        function changeDateStatus(citaState, CitaID) {
            // Aquí puedes realizar la solicitud AJAX con el valor de citaState
            //console.log(`Estado de cita seleccionado: ${citaState}`);

            $.ajax({
                url: sessionStorage.urlEP + '/api/Appointments/v1/UpdateAppointmentStatus',
                type: 'GET',
                data: { 'aID': CitaID, 'asID': citaState },
                contentType: "application/json",
                dataType: 'json',
                success: function (response) {
                    if (response.codeStatus == 0) {
                        Swal.fire({
                            title: response.messageStatus,
                            icon: 'info',
                            confirmButtonText: 'Aceptar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                swal.close();
                                location.reload();
                            }
                        })
                    }
                    else if (response.codeStatus == -1) {
                        Swal.fire({
                            title: 'Error',
                            text: response.messageStatus,
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        })
                    }

                },
                error: function (error) {
                    console.log('Error al obtener los detalles del usuario.');
                }

            }).then((result) => {
                if (result.isConfirmed) {
                    location.reload();
                }
            })
        }

        function mostrarCargando() {
            Swal.fire({
                title: 'Cargando',
                text: 'Por favor, espere un momento...',
                showCancelButton: false,
                showConfirmButton: false,
                allowOutsideClick: false,
                onBeforeOpen: () => {
                    Swal.showLoading();
                }
            });
        }
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

        });


        function fncheckDoctor(selectObject) {
            var value = selectObject.value;
            if (value == 0) {
                document.getElementById('cDoctor').disabled = true;
            } else {
                fngetDoctors(value);
                document.getElementById('cDoctor').disabled = false;
            }
        }

        $("#fecha").on("change", function () {
            validarFecha();
        });

        function obtenerFechaActualSinUTC(fechaActual) {
            //const fechaActual = new Date();
            const fechaSinUTC = new Date(fechaActual.getTime() - fechaActual.getTimezoneOffset() * 60000);
            return fechaSinUTC.toISOString().split("T")[0]; // Obtiene la fecha en formato "YYYY-MM-DD"
        }


        // const fechaActualSinUTC = obtenerFechaActualSinUTC();
        //console.log(fechaActualSinUTC);

        function validarFecha() {
            const fechaActual = obtenerFechaActualSinUTC(new Date());
            console.log(fechaActual);
            const fechaIngresada = obtenerFechaActualSinUTC(new Date(document.getElementById("fecha").value + "T05:00:00Z"));
            console.log(fechaIngresada);
            if (fechaIngresada < fechaActual) {
                //alert("La fecha no puede ser menor que hoy.");
                Swal.fire({
                    icon: 'info',
                    title: 'Oops...',
                    text: 'La fecha no puede ser menor que hoy.',
                    confirmButtonColor: '#008dc9'
                })
                document.getElementById("fecha").value = ""; // Limpia el campo de fecha
            }
        }

        function validarHora() {
            const horaIngresada = document.getElementById("cHora").value;
            const horaActual = new Date().getUTCHours();
            const fechaHoraActualMasDosHoras = new Date();
            fechaHoraActualMasDosHoras.setUTCHours(fechaHoraActualMasDosHoras.getUTCHours() + 2);

            if (horaIngresada < horaActual || horaIngresada < "08:00" || horaIngresada > "17:00" || horaIngresada > fechaHoraActualMasDosHoras.getUTCHours()) {
                //alert("La hora debe estar entre las 08:00 y las 17:00 y no puede ser menor que 2 horas desde ahora.");
                Swal.fire({
                    icon: 'info',
                    title: 'Oops...',
                    text: 'La hora debe estar entre las 08:00 AM y las 5:00 PM y puede ser maximo 2 horas antes de la cita.',
                    confirmButtonColor: '#008dc9'
                })
                document.getElementById("cHora").value = ""; // Limpia el campo de hora
            }
        }

        $("#cHora").on("change", function () {
            validarHora();
        });


        function fngetDoctors(spID) {
            $.ajax({
                type: 'GET',
                url: '@ViewBag.urlEndPoint' + '/api/Generics/v1/GetDoctors?spID=' + spID, // Ruta para crear o actualizar usuarios
                contentType: 'application/json',
                success: function (response) {
                    var select = document.getElementById("cDoctor");
                    select.options.length = 0;
                    var option = document.createElement("option");
                    option.value = 0;
                    option.text = "Seleccionar Doctor";
                    select.appendChild(option);
                    for (var i = 0; i < response.length; i++) {
                        var option = document.createElement("option");
                        option.value = response[i].value;
                        option.text = response[i].text;
                        select.appendChild(option);
                    }

                },
                error: function (error) {
                    // Manejar errores de la solicitud AJAX
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Se presento un error al obtener la información',
                        confirmButtonColor: '#008dc9'
                    })
                }
            });
        }

        function showTimePicker() {
            document.getElementById('timePicker').style.display = 'block';
        }

        function setSelectedTime() {
            const selectedHour = document.getElementById('hour').value;
            document.getElementById('cHora').value = selectedHour + ':00';
            document.getElementById('timePicker').style.display = 'none';
        }
   
        $(document).ready(function () {
            let uID = sessionStorage.getItem("userID");
            getUserCitas(uID);
            $("#loadingScreen").show();

        });
        function getUserCitas(uID) {
            // Realizar solicitud AJAX para obtener la lista de usuarios
            // var utID = 1;
            mostrarCargando();

            $.ajax({
                url: sessionStorage.urlEP + '/api/Appointments/v1/GetAppointmentsList',
                type: 'GET',
                data: { 'uID': uID },
                contentType: "application/json",
                dataType: 'json',
                success: function (data) {
                    $("#loadingScreen").hide();
                    //console.log("Respuesta del Servidor " + data);
                    // Procesar los datos recibidos y agregar filas a la tabla
                    let dataSet = [];
                    let users = data.itemJson;
                    //console.table(users);
                    if (data == null) {
                        $("#loadingScreen").hide();
                    }
                    $.each(data.itemJson, function (index, cita) {
                        let fechaCita = cita.aDate;
                        let fechaFormateada = fechaCita.substring(0, 10);
                        let rowData = [
                            index + 1,
                            cita.aID,
                            cita.uName,
                            cita.uCellphone,
                            cita.uDoctorName,
                            cita.aDescription,
                            fechaFormateada,
                            cita.aTime,
                            cita.asName
                        ];
                        dataSet.push(rowData);
                    });

                    // Inicializa o actualiza el DataTable con los datos procesados
                    tableCitas = $('#citasUsuario').DataTable({
                        columns: [
                            { title: '#' },
                            { title: 'ID', visible: false },
                            { title: 'Nombre' },
                            { title: 'Celular' },
                            { title: 'Doctor' },
                            { title: 'Motivo' },
                            { title: 'Fecha' },
                            { title: 'Hora' },
                            { title: 'Estado' },
                            {
                                title: 'Acciones',
                                orderable: false, // Para desactivar la ordenación en esta columna
                                data: null, // Usaremos la columna "Acciones" solo para botones
                                defaultContent: '<button class="btn btn-primary btn-sm btnDesactivarC" data-toggle="tooltip" title="Cancelar Cita" type="button"> <i class="fas fa-ban"> </i></button> ' +
                                    '<button class="btn btn-danger btn-sm btnEditarC" data-toggle="modal" data-target="#editarCitaModal" data-toggle="tooltip" title="Reprogramar Cita" style="display: none"> <i class="fa-regular fa-pen-to-square"></i></button> '
                            }
                        ],

                        data: dataSet,
                        dom: 'Bfrtip',
                        buttons: {
                            buttons: [
                                {
                                    extend: 'print', className: 'btn btn-sm',
                                    messageTop: 'Citas SmileSoft',
                                }
                            ]
                        },
                        "paging": false,
                        select: true,
                        destroy: true,
                        language: {
                            url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
                        },
                        createdRow: function (row, data, dataIndex) {
                            // Obtén el valor del estado en la columna "Estado"
                            var estado = data[8]; // Asegúrate de que 8 sea el índice correcto para la columna "Estado"

                            // Si el estado es "cancelado", oculta los botones en esta fila
                            if (estado === 'Cancelado') {
                                $(row).find('.btnDesactivarC, .btnEditarC').hide();
                            }
                        }

                    });


                    Swal.close();
                    tableCitas.column(9).nodes().to$().find('.btnDesactivarC').click(function () {
                        // Maneja la acción del botón aqui
                        let data = tableCitas.row($(this).parents('tr')).data();
                        let CitaID = data[1]; // la primera columna contiene el ID del usuario
                        let CitaEstado = data[8];
                        if (CitaEstado == "Realizado") {
                            Swal.fire({
                                icon: 'info',
                                title: 'Oops...',
                                text: 'La cita ya fue realizada, no se puede cancelar.',
                                confirmButtonColor: '#008dc9'
                            })
                        } else if (CitaEstado == "Cancelado") {
                            Swal.fire({
                                icon: 'info',
                                title: 'Oops...',
                                text: 'La cita ya fue cancelada.',
                                confirmButtonColor: '#008dc9'
                            })
                        } else if (CitaEstado == "Confirmado") {
                            Swal.fire({
                                icon: 'info',
                                title: 'Oops...',
                                text: 'La cita ya fue confirmada, no se puede cancelar.',
                                confirmButtonColor: '#008dc9'
                            })
                        } else if (CitaEstado == "Pendiente") {
                            Swal.fire({
                                title: 'Cancelar Cita',
                                text: '¿Está seguro que desea cancelar la cita?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Si, Cancelar Cita',
                                cancelButtonText: 'Cancelar'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $.ajax({
                                        url: sessionStorage.urlEP + '/api/Appointments/v1/UpdateAppointmentStatus',
                                        type: 'GET',
                                        data: { 'aID': CitaID, 'asID': 4 },
                                        contentType: "application/json",
                                        dataType: 'json',
                                        success: function (response) {
                                            if (response.codeStatus == 0) {
                                                Swal.fire({
                                                    title: 'Cita Cancelada',
                                                    text: 'La cita ha sido Cancelada exitosamente.',
                                                    icon: 'success',
                                                    confirmButtonText: 'Aceptar'
                                                }).then((result) => {
                                                    if (result.isConfirmed) {
                                                        location.reload();
                                                    }
                                                })
                                            }
                                            else if (response.codeStatus == -1) {
                                                Swal.fire({
                                                    title: 'Error',
                                                    text: response.messageStatus,
                                                    icon: 'error',
                                                    confirmButtonText: 'Aceptar'
                                                })
                                            }

                                        },
                                        error: function (error) {
                                            console.log('Error al obtener los detalles del usuario.');
                                        }

                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            location.reload();
                                        }
                                    })
                                }
                            })
                        }

                    });
                    tableCitas.column(9).nodes().to$().find('.btnEditarC').click(function () {
                        // Maneja la acción del botón aqui
                        let data = tableCitas.row($(this).parents('tr')).data();
                        let CitaID = data[1]; // la primera columna contiene el ID del usuario
                        Swal.fire({
                            title: 'Reprogramar Cita',
                            text: '¿Está seguro que desea reprogramar la cita?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Si, reprogramar',
                            cancelButtonText: 'Cancelar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $.ajax({
                                    url: sessionStorage.urlEP + '/api/Appointments/v1/UpdateAppointmentStatus',
                                    type: 'POST',
                                    data: { 'aID': CitaID },
                                    contentType: "application/json",
                                    dataType: 'json',
                                    success: function (response) {
                                        if (response.codeStatus == 0) {
                                            Swal.fire({
                                                title: 'Cita Cancelada',
                                                text: 'La cita ha sido Cancelada exitosamente.',
                                                icon: 'success',
                                                confirmButtonText: 'Aceptar'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    location.reload();
                                                }
                                            })
                                        }
                                        else if (response.codeStatus == -1) {
                                            Swal.fire({
                                                title: 'Error',
                                                text: response.messageStatus,
                                                icon: 'error',
                                                confirmButtonText: 'Aceptar'
                                            })
                                        }

                                    },
                                    error: function (error) {
                                        console.log('Error al obtener los detalles del usuario.');
                                    }

                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        location.reload();
                                    }
                                })
                            }
                        })


                    });

                }
            });
        };
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

        });
  

        function SolicitarCitaPaciente() {

            //Datos de la Cita
            let date = document.getElementById("fecha").value.trim();
            let time = document.getElementById("cHora").value.trim() + ':00';
            let doctor = document.getElementById("cDoctor").value.trim();
            let message = document.getElementById("mensaje").value.trim();

            let data = {
                //Datos de la cuenta
                uID: parseInt(sessionStorage.getItem("userID")),
                utID: 3,
                oID: 1,
                //uLoginName: documentID,
                //uPassword: documentID,
                //uStatus: true,

                //Datos Personales
                uName: sessionStorage.getItem("userFName"),
                ulastName: sessionStorage.getItem("userLName"),
                uDocument: sessionStorage.getItem("userDocument"),
                dtID: parseInt(sessionStorage.getItem("usertDocument")),
                uBirthDate: sessionStorage.getItem("userBirthDate"),
                gID: parseInt(sessionStorage.getItem("userGender")),
                //Datos de Contacto
                uEmailAddress: sessionStorage.getItem("userEmail"),
                uCellphone: sessionStorage.getItem("userPhone"),

                //Datos de la Cita
                asID: 0,
                aID: 0,
                aDate: date,
                aTime: time,
                dID: parseInt(doctor),
                aDescription: message

            };
            if (data.aDate == "" || data.aTime == "" || data.dID == 0 || data.aDescription == "") {
                Swal.fire({
                    icon: 'info',
                    title: 'Oops...',
                    text: 'Por favor ingrese todos los datos.',
                    confirmButtonColor: '#008dc9'
                })
                return;
            } if (data.dID == 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'Oops...',
                    text: 'Por favor seleccione una Especialidad y un doctor.',
                    confirmButtonColor: '#008dc9'
                })
                return;
            } else {

                $.ajax({
                    type: 'POST',
                    url: '@ViewBag.urlEndPoint' + '/api/Appointments/v1/SetAppointment', // Ruta para crear o actualizar usuarios
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log(response.OutputCodeError);
                        if (response.codeStatus === '0') {
                            // Registro exitoso, puedes redirigir al usuario o mostrar un mensaje de éxito
                            //alert('Usuario registrado con éxito.');
                            Swal.fire({
                                icon: 'success',
                                title: 'Cita Solicitada con éxito',
                                confirmButtonColor: '#008dc9',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.reload();
                                }
                            });
                        } else if (response.codeStatus === '-1') {
                            Swal.fire({
                                icon: 'info',
                                title: 'Oops...',
                                text: response.messageStatus,
                                confirmButtonColor: '#008dc9'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.reload();
                                }
                            });
                        }
                    },
                    error: function (error) {
                        // Manejar errores de la solicitud AJAX
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Se presento un error al guardar la información',
                            confirmButtonColor: '#008dc9'
                        })
                    }
                });
            }
        }

    </script> *@

}