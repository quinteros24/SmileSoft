@using System.Collections.Specialized
@using WebSmileSoft.Models;
@* @model WebSmileSoft.Models.UsuariosModel[] *@
@model List<UsuariosModel>

@{
    ViewData["Title"] = "Tabla";
}

<!-- Pantalla de carga -->
@* <div id="loadingScreen">
    <div id="loadingSpinner"></div>
</div> *@
<nav aria-label="breadcrumb" class="main-breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Inicio</a></li>
        <li class="breadcrumb-item">Administracion de Usuarios</li>
        <li class="breadcrumb-item active" aria-current="page">
            CRUD Usuarios
        </li>
    </ol>
</nav>
<div class="mt-2 text-end my-2">
    @* <button onclick="mostrarCarga();verusers(1);" class="btn btn-primary">Administradores</button>
    <button onclick="mostrarCarga();verusers(2);" class="btn btn-danger">Doctores</button>
    <button onclick="mostrarCarga();verusers(3);" class="btn btn-secondary">Pacientes</button>
   *@  <button onclick="verusers(1);" class="btn btn-primary">Administradores</button>
    <button onclick="verusers(2);" class="btn btn-danger">Doctores</button>
    <button onclick="verusers(3);" class="btn btn-secondary">Pacientes</button>

    <a class="btn btn-success add-user-btn " data-toggle="modal" data-target="#addUserModal"><i class="fas fa-user-plus"> </i> Agregar Usuario</a>

</div>

<div class="card-body" id="content-container">
    <!-- Aquí va la tabla -->
    <div class="table-responsive card shadow d-flex">
        <table id="example" class="table table-hover non-hover mt-2 mb-2 table-striped" width="100%"></table>
    </div>
</div>

<!-- Modal de Edición -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Editar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="username" class="form-label">Usuario</label>
                        <input type="text" class="form-control" id="username" name="username">
                    </div>
                    <div class="form-group">
                        <label for="tipoUsuarioe">* Tipo de Usuario:</label>
                        <select class="form-control" id="tipoUsuarioe" name="tipoUsuarioe" required>
                            <option value="2">Odontólogo</option>
                            <option value="3">Paciente</option>
                            <option value="1">Administrador</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editNombre" class="form-label">Nombre:</label>
                        <input type="text" class="form-control" id="editNombre" name="editNombre">
                    </div>
                    <div class="mb-3">
                        <label for="editApellido" class="form-label">Apellido:</label>
                        <input type="text" class="form-control" id="editApellido" name="editApellido">
                    </div>
                    <div class="mb-3">
                        <label for="editCorreo" class="form-label">Correo Electrónico:</label>
                        <input type="email" class="form-control" id="editCorreo" name="editCorreo">
                    </div>
                    <div class="mb-3">
                        <label for="editCelular" class="form-label">Celular:</label>
                        <input type="text" class="form-control" id="editCelular" name="editCelular">
                    </div>
                    <div class="mb-3">
                        <label for="editTipoDocumento" class="form-label">Tipo de Documento:</label>
                        <input type="text" class="form-control" id="editTipoDocumento" name="editTipoDocumento">
                    </div>
                    <div class="mb-3">
                        <label for="editDocumento" class="form-label">Número de Documento:</label>
                        <input type="text" class="form-control" id="editDocumento" name="editDocumento">
                    </div>
                    @*  <div class="mb-3">
                    <label for="editIsBlocked" class="form-label">Bloqueado</label>
                    <input type="number" class="form-control" id="editIsBlocked" name="editIsBlocked">
                    </div> *@
                    <div class="mb-3">
                        <label for="editStatus" class="form-label">Estado:</label>
                        <input type="text" class="form-control" id="editStatus" name="editStatus" disabled>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="savePasswordChangesBtn">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Cambio Contraseña -->
<div class="modal fade" id="editPassword" tabindex="-1" aria-labelledby="passwordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="passwordModalLabel">Cambiar Contraseña</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="mb-3">
               <span id="userNamePass" class="strong"></span>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">Nueva Contraseña:</label>
                        <input type="password" class="form-control" id="newPassword" name="newPassword">
                    </div> 
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="changePasswordBtn">Cambiar Contraseña</button>
            </div>
        </div>
    </div>
</div>



@*
    <div class="form-group">
        <label for="universidad">Universidad:</label>
        <input type="text" class="form-control" id="universidad" name="universidad">
    </div>
    *@
<div class="modal fade" id="addUserModal" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <!-- Modal más grande (modal-lg) -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Agregar Usuario</h5>
            </div>
            <div class="modal-body">
                <form id="add-user-form">
                    <!-- Campos del formulario -->
                    <div class="row">
                        <div class="form-group">
                            <label for="tipoUsuario">* Tipo de Usuario:</label>
                            <select class="form-control" id="tipoUsuario" name="tipoUsuario" required>
                                <option value="2">Odontólogo</option>
                                <option value="3">Paciente</option>
                                <option value="1">Administrador</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <!-- Primera columna -->
                            <!-- Campos del formulario -->
                            <!-- Aquí van los campos que deseas en la primera columna -->
                            <div class="form-group">
                                <label for="nombres">* Nombres:</label>
                                <input type="text" class="form-control" id="nombres" name="nombres" required>
                            </div>
                            <div class="form-group">
                                <label for="celular">Número de Celular:</label>
                                <input type="text" class="form-control" id="celular" name="celular" required>
                            </div>
                            <div class="form-group">
                                <label for="tipoDocumento">* Tipo de Documento:</label>
                                <select class="form-control" id="tipoDocumento" name="tipoDocumento" required>
                                    <option value="cc">Cedula de Ciudadania (CC)</option>
                                    <option value="ce">Cedula de Extranjeria (CE)</option>
                                    <option value="ti">Tarjeta de Identidad (TI)</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="usuario">* Usuario:</label>
                                <input type="text" class="form-control" id="usuario" name="usuario" required>
                            </div>

                            <div class="form-group">
                                <label for="fechaNacimiento">Fecha de Nacimiento:</label>
                                <input type="date" class="form-control" id="fechaNacimiento" name="fechaNacimiento" required>
                            </div>

                            @*<div class="form-group">
                            <label for="especialidad">Especialidad:</label>
                            <input type="text" class="form-control" id="especialidad" name="especialidad">
                            </div>*@
                            <!-- Agrega más campos aquí -->

                        </div>
                        <div class="col-md-6">
                            <!-- Segunda columna -->
                            <!-- Campos del formulario -->
                            <!-- Aquí van los campos que deseas en la segunda columna -->
                            <div class="form-group">
                                <label for="apellidos">* Apellidos:</label>
                                <input type="text" class="form-control" id="apellidos" name="apellidos" required>
                            </div>
                            <div class="form-group">
                                <label for="correo">* Correo Electrónico:</label>
                                <input type="email" class="form-control" id="correo" name="correo" required>
                            </div>
                            <div class="form-group">
                                <label for="numeroDocumento">* Número de Documento:</label>
                                <input type="text" class="form-control" id="numeroDocumento" name="numeroDocumento" required>
                            </div>
                            <div class="form-group">
                                <label for="password">* Contraseña:</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            @*<div class="form-group">
                            <label for="genero">Género:</label>
                            <div class="form-check">
                            <input class="form-check-input" type="radio" name="genero" id="masculino" value="Masculino" required>
                            <label class="form-check-label" for="masculino">Masculino</label>
                            </div>
                            <div class="form-check">
                            <input class="form-check-input" type="radio" name="genero" id="femenino" value="Femenino" required>
                            <label class="form-check-label" for="femenino">Femenino</label>
                            </div>
                            </div>*@
                            <div class="form-group">
                                <label for="direccion">Dirección:</label>
                                <input type="text" class="form-control" id="direccion" name="direccion" required>
                            </div>



                            <!-- Agrega más campos aquí -->

                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="add-user">Agregar</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {


    <script>
        //<!-- Script para Visualizar Lista De Usuarios en la Tabla -->
        //Recibir el parametro de la funcion verusers(1) para filtrar por tipo de usuario
        $(document).ready(function () {
            verusers(3);
            $("#loadingScreen").show();
        });
        //Funcion para visualizar la lista de usuarios en la tabla pasando como parametro el tipo de usuario
        function verusers(utID) {
            // Realizar solicitud AJAX para obtener la lista de usuarios
            // var utID = 1;
            mostrarCargando();

            $.ajax({
                url: '@ViewBag.urlEndPoint' + '/api/Users/v1/ViewUsers',
                type: 'GET',
                data: { 'utID': utID },
                contentType: "application/json",
                dataType: 'json',
                success: function (data) {
                    $("#loadingScreen").hide();
                    //console.log("Respuesta del Servidor " + data);
                    // Procesar los datos recibidos y agregar filas a la tabla
                    let dataSet = [];
                    let users = data.itemJson;
                    console.table(users);
                    let rolesMapping = {
                        1: 'Administrador',
                        2: 'Doctores',
                        3: 'Pacientes'
                    };
                    let BlockMapping = {
                        0: 'No Bloqueado',
                        1: 'Bloqueado'
                    };
                    let StatusMapping = {
                        0: 'Activo',
                        1: 'Inactivo'
                    };
                    $.each(data.itemJson, function (index, usuario) {
                        let rol = rolesMapping[usuario.utID];
                        let Block = BlockMapping[usuario.uIsBlocked];
                        let Status = StatusMapping[usuario.uStatus];
                        let rowData = [
                            usuario.uID,
                            rol,
                            usuario.uLoginName,
                            usuario.uName,
                            usuario.uLastName,
                            usuario.uEmailAddress,
                            usuario.uCellphone,
                            usuario.dtID,
                            usuario.uDocument,
                            Block,
                            Status
                        ];
                        dataSet.push(rowData);
                    });

                    // Inicializa o actualiza el DataTable con los datos procesados
                    table = $('#example').DataTable({
                        // new DataTable('#example', {
                        columns: [
                            { title: 'ID' },
                            { title: 'Rol' },
                            { title: 'Usuario' },
                            { title: 'Nombre' },
                            { title: 'Apellidos' },
                            { title: 'Correo Electronico' },
                            { title: 'Celular' },
                            { title: 'Tipo Documento' },
                            { title: 'Documento' },
                            { title: 'Bloqueado' },
                            { title: 'Estado' },
                            {
                                title: 'Acciones',
                                orderable: false, // Para desactivar la ordenación en esta columna
                                data: null, // Usaremos la columna "Acciones" solo para botones
                                defaultContent: '<button class="btn btn-primary btn-sm" id="btnEditar" data-toggle="modal" data-target="#editModal" data-toggle="tooltip" title="Editar Usuario"><i class="fas fa-edit"></i></button>' +
                                    '<button class="btn btn-success btn-sm deactivate-button" id="btnDesactivar" data-toggle="modal" data-target="#deactivateModal" data-toggle="tooltip" title="Desactivar Usuario" > <i class="fas fa-ban"> </i></button > ' +
                                    '<button class="btn btn-danger btn-sm password-button" id="btnPassword" data-toggle="modal" data-target="#passwordModal" data-toggle="tooltip" title="Cambiar Contraseña" > <i class="fa-solid fa-lock"></i></button > '

                            }
                        ],
                        data: dataSet,
                        dom: 'Bfrtip',
                        "dom": "<'dt--top-section'<'row'<'col-sm-12 col-md-6 d-flex justify-content-md-start justify-content-center'B><'col-sm-12 col-md-6 d-flex justify-content-md-end justify-content-center mt-md-0 mt-3'f>>>" +
                            "<'table-responsive'tr>" +
                            "<'dt--bottom-section d-sm-flex justify-content-sm-between text-center'<'dt--pages-count  mb-sm-0 mb-3'i><'dt--pagination'p>>",
                        buttons: {
                            buttons: [
                                { extend: 'copy', className: 'btn btn-sm' },
                                {
                                    extend: 'print', className: 'btn btn-sm',
                                    messageTop: 'Tabla de Usuarios SmileSoft',
                                },
                                {
                                    extend: 'spacer',
                                    style: 'bar',
                                    text: 'Exportar a:'
                                },
                                { extend: 'csv', className: 'btn btn-sm' },
                                { extend: 'excel', className: 'btn btn-sm' },
                            ]
                        },
                        select: true,
                        destroy: true,
                        language: {
                            url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
                        },

                    });
                    Swal.close();
                    table.column(11).nodes().to$().find('#btnEditar').click(function () {
                        // Maneja la acción del botón aquí
                        let data = table.row($(this).parents('tr')).data();

                        let userId = data[0]; // Supongamos que la primera columna contiene el ID del usuario
                        let userData = {
                            uID: userId,
                            utID: data[1],
                            uLoginName: data[2],
                            uName: data[3],
                            uLastName: data[4],
                            uEmailAddress: data[5],
                            uCellphone: data[6],
                            dtID: data[7],
                            uDocument: data[8],
                            uIsBlocked: data[9],
                            uStatus: data[10]
                        };

                        console.log("Usuario a Editar" + userData);
                        //$("#editModal #userName").val(userData.uLoginName);
                        // Llena otros campos del modal con datos del usuario
                        // Llena los campos del formulario de edición con los datos del usuario
                        $("#username").val(userData.uLoginName);
                        $("#tipoUsuarioe").val(userData.utID);
                        $("#editNombre").val(userData.uName);
                        $("#editApellido").val(userData.uLastName);
                        $("#editCelular").val(userData.uCellphone);
                        $("#editCorreo").val(userData.uEmailAddress);
                        $("#editDireccion").val(userData.uAddress);
                        $("#editTipoDocumento").val(userData.dtID);
                        $("#editDocumento").val(userData.uDocument);
                        //$("#editIsBlocked").val(userData.uIsBlocked);
                        $("#editStatus").val(userData.uStatus);

                        // Abre el modal de edición
                        $("#editModal").modal("show");


                        console.log("Usuario a Editar" + userId);
                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $("#saveChangesBtn").click(function () {
                            let status = $("#editStatus").val() == "Activo" ? 1 : 0;
                            let utID2 = $("#tipoUsuarioe").val();
                            console.log("Dato enviado " + utID2);
                            // Obtén los datos actualizados del formulario de edición
                            let updatedUserData = {
                                // Recoge los datos actualizados desde los campos del formulario
                                uID: userId,
                                utID: parseInt($("#tipoUsuarioe").val()), // Supongamos que el campo de edición del rol tiene el id "editRol"
                                uLoginName: $("#username").val(),
                                uName: $("#editNombre").val(),
                                uLastName: $("#editApellido").val(),
                                uEmailAddress: $("#editCorreo").val(),
                                uCellphone: $("#editCelular").val(),
                                dtID: parseInt($("#editTipoDocumento").val()),
                                uDocument: $("#editDocumento").val(),
                                //uIsBlocked: $("#editIsBlocked").val(),
                                uStatus: status
                            };
                            console.log("Usuario a Editar" + userId)
                            // Realiza una solicitud AJAX para guardar los cambios en el servidor
                            $.ajax({
                                url: '@ViewBag.urlEndPoint' + '/api/Users/v1/CreateUpdateUsers', // Reemplaza con la URL correcta
                                type: 'POST',
                                data: JSON.stringify(updatedUserData), // Convierte updatedUserData a JSON
                                contentType: "application/json", // Especifica el tipo de contenido
                                dataType: "json",
                                success: function (response) {
                                    // Cierra el modal de edición
                                    $("#editModal").modal("hide");

                                    // Puedes realizar otras acciones después de guardar los cambios si es necesario
                                    // Por ejemplo, actualizar la tabla con los datos modificados
                                    // o mostrar un mensaje de éxito
                                },
                                error: function () {
                                    $("#editModal").modal("hide");
                                    Swal.fire({
                                        title: 'Error',
                                        text: 'Error al guardar los cambios',
                                        icon: 'error',
                                        confirmButtonText: 'Aceptar'
                                    });
                                }
                            });
                        });
                    });
                    table.column(11).nodes().to$().find('#btnDesactivar').click(function () {
                        // Maneja la acción de desactivación aquí
                        let data = table.row($(this).parents('tr')).data();
                        let userId = data[0];
                        let loginName = data[2];
                        let userName = data[3] + ' ' + data[4];

                        console.log("Documento" + loginName + " User ID: " + userId);
                        //var userId = data[0]; // Obtén el ID del usuario desde el botón
                        let dataUser = {
                            uID: userId,
                            uStatus: 0
                        }; //Ajustar para enviar si esta inactivo activar si esta activo desactivar
                        // Muestra un mensaje de confirmación antes de desactivar el usuario

                        Swal.fire({
                            title: '¿Estás seguro de Desactivar? a:',
                            text: '¡ ' + userName + ' !',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Sí, desactivar',
                            cancelButtonText: 'Cancelar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                //console.log("Desactivar 2" + userId);
                                // Realiza la solicitud AJAX para desactivar el usuario
                                $.ajax({
                                    url: '@ViewBag.urlEndPoint' + '/api/Users/v1/CreateUpdateUsers/',
                                    type: 'POST',
                                    data: JSON.stringify(dataUser),
                                    contentType: "application/json",
                                    //async: false,
                                    dataType: "json",
                                    success: function (response) {
                                        console.log("Respuesta del Servidor " + response);

                                        Swal.fire({
                                            title: 'Usuario Desactivado',
                                            text: 'El usuario' + data[0] + 'se desactivó correctamente',
                                            icon: 'success',
                                            confirmButtonText: 'Aceptar'
                                        });


                                    },
                                    error: function () {
                                        Swal.fire({
                                            title: 'Error',
                                            text: 'Error al deshabilitar el usuario',
                                            icon: 'error',
                                            confirmButtonText: 'Aceptar'
                                        });
                                    }
                                });
                            }
                        });

                    });
                    table.column(11).nodes().to$().find('#btnPassword').click(function () {
                        // Maneja la acción del botón aquí
                        let data = table.row($(this).parents('tr')).data();

                        let userId = data[0]; // Supongamos que la primera columna contiene el ID del usuario
                        console.log("Contraseña " + userId)
                        let userNameEdit = data[3] + ' ' + data[4];

                        //$("#usernamepass").val(userNameEdit);
                        var userNamePassSpan = document.getElementById("userNamePass");

                        // Establece el contenido del span
                        userNamePassSpan.innerHTML = userNameEdit;
                        // Abre el modal de edición
                        $("#editPassword").modal("show");


                        console.log("Usuario a Editar" + userId);
                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $("#changePasswordBtn").click(function () {

                            let password = $("#newPassword").val();
                            if (!validarContraseña(password)) {
                                Swal.fire({
                                    text: 'La contraseña no cumple con los requisitos.',
                                    confirmButtonColor: '#008dc9'
                                });
                            } else {
                                // Obtén los datos actualizados del formulario de edición
                                let updatedUserData = {
                                    // Recoge los datos actualizados desde los campos del formulario
                                    uID: userId,
                                    Password: password
                                };


                                // Realiza una solicitud AJAX para guardar los cambios en el servidor
                                $.ajax({
                                    url: '@ViewBag.urlEndPoint' + '/api/Users/v1/ChangePassword', // Reemplaza con la URL correcta
                                    type: 'POST',
                                    data: JSON.stringify(updatedUserData), // Convierte updatedUserData a JSON
                                    contentType: "application/json", // Especifica el tipo de contenido
                                    dataType: "json",
                                    success: function (response) {
                                        // Cierra el modal de edición
                                        if (response.codeStatus == 0) {
                                            $("#editPassword").modal("hide");
                                            //window.location.href = '@Url.Action("Index", "")';
                                            Swal.fire({
                                                text: 'Contraseña actualizada con exito',
                                                confirmButtonColor: '#008dc9'
                                            });
                                        } else {

                                            Swal.fire({
                                                text: "Hubo un fallo" + response.messageStatus,
                                                confirmButtonColor: '#008dc9'
                                            });
                                            //alert('Inicio de sesión fallido, ' + response.messageStatus);
                                        }


                                        // Puedes realizar otras acciones después de guardar los cambios si es necesario
                                        // Por ejemplo, actualizar la tabla con los datos modificados
                                        // o mostrar un mensaje de éxito
                                    },
                                    error: function () {
                                        // $("#editModal").modal("hide");
                                        // Swal.fire({
                                        //     title: 'Error',
                                        //     text: 'Error al guardar los cambios',
                                        //     icon: 'error',
                                        //     confirmButtonText: 'Aceptar'
                                        // });
                                    }
                                });
                            }
                        });
                    });

                }
            });
        };
        function validarContraseña(password) {
    // Requiere al menos 8 caracteres
    if (password.length < 8) {
        return false;
    }
    // Requiere al menos una letra minúscula
    if (!/[a-z]/.test(password)) {
        return false;
    }
    // Requiere al menos una letra mayúscula
    if (!/[A-Z]/.test(password)) {
        return false;
    }
    // Requiere al menos un dígito
    if (!/\d/.test(password)) {
        return false;
    }
    // agregar requisitos adicionales aquí, como caracteres especiales
    // if (!/[!#$%^&*()_+{}\[\]:;<>,.?~\\-]/.test(password)) {
    //     return false;
    // }

    return true;
}

        $(".add-user-btn").click(function () {
            // Abre el modal de agregar usuario
            $("#addUserModal").modal("show");
        });

        // Función para permitir solo números en un campo de entrada
        function allowNumbersOnly(inputField) {
            inputField.value = inputField.value.replace(/[^0-9]/g, '');
        }

        // Aplica la función a los campos de celular y número de documento
        $("#celular").on("input", function () {
            allowNumbersOnly(this);
        });

        $("#numeroDocumento").on("input", function () {
            allowNumbersOnly(this);
        });

        // Controlador de clic para el botón "Agregar"
        $("#add-user").click(function () {
            // Obtiene los datos del formulario

            var userData = {
                utID: $("#tipoUsuario").val(),
                uName: $("#nombres").val(),
                uLastName: $("#apellidos").val(),
                uCellphone: $("#celular").val(),
                uEmailAddress: $("#correo").val(),
                uAddress: $("#direccion").val(),
                uLoginName: $("#usuario").val(),
                uPassword: $("#password").val(),
                dtID: $("#tipoDocumento").val(),
                uDocument: $("#numeroDocumento").val()
                //genero: $("input[name='genero']:checked").val(), // Obtiene el valor del radio button seleccionado
                //fechaNacimiento: $("#fechaNacimiento").val(),

            };
            console.log("Datos del Usuario " + userData);
            //Validar campos obligatorios
        @*
            if (!userData.nombres || !userData.apellidos || !userData.tipoDocumento || !userData.numeroDocumento || !userData.usuario || !userData.password || !userData.tipoUsuario) {
            mostrarMensajeError('Por favor, complete todos los campos obligatorios.');
            return;
            }
            *@
                // function mostrarMensajeError(mensaje) {
                //     Swal.fire({
                //         title: 'Error',
                //         text: mensaje,
                //         icon: 'error',
                //         confirmButtonText: 'Aceptar'
                //     });
                // }
                                                                                                //!userData.correo ||

                                                                                                // Validación de la contraseña
            let password = userData.uPassword;
            let passwordError = validarContraseña(password);

            if (passwordError) {
                mostrarMensajeError(passwordError);
                return;
            }
            function validarContraseña(password) {
                if (password.length < 8) {
                    return "La contraseña debe tener al menos 8 caracteres.";
                }

                if (!/[A-Z]/.test(password)) {
                    return "La contraseña debe contener al menos una letra mayúscula.";
                }

                if (!/[a-z]/.test(password)) {
                    return "La contraseña debe contener al menos una letra minúscula.";
                }

                if (!/\d/.test(password)) {
                    return "La contraseña debe contener al menos un número.";
                }

                return null; // Si la contraseña cumple con los requisitos, retorna null
            }

            function mostrarMensajeError(mensaje) {
                Swal.fire({
                    title: 'Error',
                    text: mensaje,
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
            }

            // Realiza una solicitud AJAX para agregar el usuario en el servidor
            $.ajax({
                type: "POST",
                url: 'https://ep-smilesoft-develop.azurewebsites.net' + '/api/Users/v1/CreateUpdateUsers', // Ruta para agregar el usuario
                data: JSON.stringify(userData), // Convierte userData a JSON
                contentType: "application/json", // Especifica el tipo de contenido

                dataType: "json",
                success: function (result) {
                    // Actualiza la vista o realiza alguna otra acción
                    $("#addUserModal").modal("hide");
                    //alert("Usuario agregado correctamente");
                    // Cierra el modal de agregar usuario
                    Swal.fire({
                        title: 'Usuario Agregado',
                        text: 'El usuario se agregó correctamente',
                        icon: 'success',
                        confirmButtonText: 'Aceptar'
                    });
                },
                error: function () {
                    //alert("Error al agregar el usuario");
                    Swal.fire({
                        title: 'Error',
                        text: 'Error al agregar el usuario',
                        icon: 'error',
                        confirmButtonText: 'Aceptar'
                    });
                }
            });
        });

        // function mostrarCarga() {
        //     // Ocultar el contenido suavemente
        //     $('#content-container').addClass('hide-content');

        //     Swal.fire({
        //         title: 'Cargando',
        //         html: 'Por favor, espere un momento',
        //         timer: 1000,
        //         timerProgressBar: true,
        //         didOpen: () => {
        //             Swal.showLoading();
        //         },
        //         willClose: () => {
        //             // Aquí puedes realizar acciones adicionales después de que se cierre la ventana de carga, si es necesario.
        //             // Por ejemplo, mostrar el contenido nuevamente.
        //             $('#content-container').removeClass('hide-content');
        //         }
        //     });
        // }
        function mostrarCargando() {
            Swal.fire({
                title: 'Cargando',
                text: 'Por favor, espere un momento...',
                showCancelButton: false,
                showConfirmButton: false,
                allowOutsideClick: false,
                onBeforeOpen: () => {
                    Swal.showLoading();
                }
            });
        }

        
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

        });
    </script>



        }
