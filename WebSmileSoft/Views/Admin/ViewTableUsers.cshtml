@{
    ViewData["Title"] = "Tabla";
}

<!-- Pantalla de carga -->
@* <div id="loadingScreen">
    <div id="loadingSpinner"></div>
</div> *@
<nav aria-label="breadcrumb" class="main-breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Inicio</a></li>
        <li class="breadcrumb-item">Administracion de Usuarios</li>
        <li class="breadcrumb-item active" aria-current="page">
            CRUD Usuarios
        </li>
    </ol>
</nav>
<!-- Selectores de los tipos de Usuario a Listar -->
<div class=" my-2">
    <div class="row ">
        <div class="col-12">
            <button onclick="verusers(1);" class="btn btn-primary btn-block">Administradores</button>
            <button onclick="verusers(2);" class="btn btn-danger btn-block">Doctores</button>
            <button onclick="verusers(3);" class="btn btn-secondary btn-block">Pacientes</button>
        </div>

    </div>
</div>

<div class="card-body" id="content-container">
    <!-- Aquí va la tabla -->
    <div class="table-responsive shadow-lg">
        <table id="example" class="table table-hover non-hover mt-2 mb-2 table-striped display" width="100%"></table>
    </div>
    <div class="row justify-content-end mt-2">
        <div class="col-12 col-sm-3 text-end ">
            <a class="btn btn-success btn-block add-user-btn" data-toggle="modal" data-target="#addUserModal"><i class="fas fa-user-plus"></i> Agregar Usuario</a>
        </div>
    </div>
</div>

<!-- Modal de Edición -->
<partial name="EditUser" />

<!-- Modal Cambio Contraseña -->
<partial name="ChangePass" />

<!-- Modal Agregar Usuarios -->
<partial name="AddUsers" />



@section Scripts {
    <script>
        document.getElementById("tipoUsuarioed").addEventListener("change", function () {
            var campoOpcional = document.getElementById("campoOpcional");
            if (this.value === "2") {
                campoOpcional.style.display = "block";
            } else {
                campoOpcional.style.display = "none";
            }
        });

        document.getElementById("tipoUsuario").addEventListener("change", function () {
            var campoOpcional = document.getElementById("campoOpcionala");
            if (this.value === "2") {
                campoOpcional.style.display = "block";
            } else {
                campoOpcional.style.display = "none";
            }
        });
    </script>
    <script>

        //<!-- Script para Visualizar Lista De Usuarios en la Tabla -->
        //Recibir el parametro de la funcion verusers(1) para filtrar por tipo de usuario
        $(document).ready(function () {
            verusers(3);
            $("#loadingScreen").show();


        });

        //Funcion para visualizar la lista de usuarios en la tabla pasando como parametro el tipo de usuario
        function verusers(utID) {
            // Realizar solicitud AJAX para obtener la lista de usuarios
            // var utID = 1;
            mostrarCargando();

            $.ajax({
                url: sessionStorage.urlEP + '/api/Users/v1/ViewUsers',
                type: 'GET',
                data: { 'utID': utID },
                contentType: "application/json",
                dataType: 'json',
                success: function (data) {
                    $("#loadingScreen").hide();
                    //console.log("Respuesta del Servidor " + data);
                    // Procesar los datos recibidos y agregar filas a la tabla
                    let dataSet = [];
                    let users = data.itemJson;
                    console.table(users);
                    let rolesMapping = {
                        1: 'Administrador',
                        2: 'Doctores',
                        3: 'Pacientes'
                    };
                    let BlockMapping = {
                        true: 'Desbloqueado',
                        false: 'Bloqueado'
                    };
                    let StatusMapping = {
                        true: 'Activo',
                        false: 'Inactivo'
                    };
                    let DocumentType = {
                        1: 'CC',
                        2: 'CE'
                        // 3: 'Tarjeta de Identidad (TI)'
                    }
                    $.each(data.itemJson, function (index, usuario) {
                        let rol = rolesMapping[usuario.utID];
                        let Block = BlockMapping[usuario.uIsBlocked];
                        let Status = StatusMapping[usuario.uStatus];
                        let DocumentT = DocumentType[usuario.dtID];
                        let rowData = [
                            usuario.uID,
                            rol,
                            usuario.uLoginName,
                            usuario.uName,
                            usuario.uLastName,
                            usuario.uEmailAddress,
                            usuario.uCellphone,
                            DocumentT,
                            usuario.uDocument,
                            //usuario.uIsBlocked,
                            //usuario.uStatus
                            Block,
                            Status
                        ];
                        dataSet.push(rowData);
                    });

                    // Inicializa o actualiza el DataTable con los datos procesados
                    table = $('#example').DataTable({
                        // new DataTable('#example', {
                        columnDefs: [
                            {
                                target: 0,
                                visible: false,
                                searchable: false
                            },
                            {
                                target: 1,
                                visible: false
                            },
                            {
                                target: 9,
                                visible: false
                            },
                            {
                                target: 7,
                                visible: false
                            }
                        ],
                        columns: [
                            { title: 'ID', visible: false },
                            { title: 'Rol', visible: false },
                            { title: 'Usuario' },
                            { title: 'Nombre' },
                            { title: 'Apellidos' },
                            { title: 'Correo Electronico' },
                            { title: 'Celular' },
                            { title: 'Tipo Documento', visible: false },
                            { title: 'Documento' },
                            { title: 'Bloqueado', visible: false },
                            { title: 'Estado' },
                            {
                                title: 'Acciones',
                                orderable: false, // Para desactivar la ordenación en esta columna
                                data: null, // Usaremos la columna "Acciones" solo para botones
                                defaultContent: '<button class="btn btn-primary btn-sm" id="btnEditar" data-toggle="modal" data-target="#editModal" data-toggle="tooltip" title="Editar Usuario"><i class="fas fa-edit"></i></button>' +
                                    '<button class="btn btn-success btn-sm deactivate-button" id="btnDesactivar" data-toggle="modal" data-target="#deactivateModal" data-toggle="tooltip" title="Desactivar Usuario" > <i class="fas fa-ban"> </i></button > ' +
                                    '<button class="btn btn-danger btn-sm password-button" id="btnPassword" data-toggle="modal" data-target="#passwordModal" data-toggle="tooltip" title="Cambiar contraseña" > <i class="fa-solid fa-lock"></i></button > '

                            }
                        ],

                        data: dataSet,
                        dom: 'Bfrtip',
                        "dom": "<'dt--top-section'<'row'<'col-sm-12 col-md-6 d-flex justify-content-md-start justify-content-center'B><'col-sm-12 col-md-6 d-flex justify-content-md-end justify-content-center mt-md-0 mt-3'f>>>" +
                            "<'table-responsive'tr>" +
                            "<'dt--bottom-section d-sm-flex justify-content-sm-between text-center'<'dt--pages-count  mb-sm-0 mb-3'i><'dt--pagination'p>>",
                        buttons: {
                            buttons: [
                                { extend: 'copy', className: 'btn btn-sm' },
                                {
                                    extend: 'print', className: 'btn btn-sm',
                                    messageTop: 'Tabla de Usuarios SmileSoft',
                                },
                                {
                                    extend: 'spacer',
                                    style: 'bar',
                                    text: 'Exportar a:'
                                },
                                { extend: 'csv', className: 'btn btn-sm' },
                                { extend: 'excel', className: 'btn btn-sm' },
                            ]
                        },
                        select: true,
                        destroy: true,
                        language: {
                            url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
                        },

                    });

                    Swal.close();
                    table.column(11).nodes().to$().find('#btnEditar').click(function () {
                        // Maneja la acción del botón aqui
                        let data = table.row($(this).parents('tr')).data();

                        let userId = data[0]; // la primera columna contiene el ID del usuario

                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $.ajax({
                            url: sessionStorage.urlEP + '/api/Users/v1/GetUserDetails',
                            type: 'GET',
                            data: { 'uID': userId },
                            contentType: "application/json",
                            dataType: 'json',
                            success: function (data) {
                                console.log("Cargando Respuesta")
                                console.log("Data:" + data.itemJson.uName);
                                //console.log(data.itemJson[0].uName);

                                if (data.itemJson === null) {
                                    console.log("No se cargo correctamente");
                                } else {
                                    // Mostrar los datos en la consola o realizar otras acciones
                                    let userData = data.itemJson; // Accede al primer elemento del arreglo
                                    console.log("Usuario a Editar" + userData)
                                    console.log("Genero del Usuario a Editar" + userData.gID);
                                    // Llama a una funcion para actualizar el formulario con los datos recibidos
                                    console.log("Actualizando Formulario")
                                    actualizarFormulario(userData);
                                }
                            },
                            error: function (error) {
                                console.log('Error al obtener los detalles del usuario.');
                            }
                        });

                        // Funcion para actualizar el formulario con los datos del usuario
                        function actualizarFormulario(userData) {
                            let StatusMapping = {
                                1: 'Activo',
                                0: 'Inactivo'
                            };

                            // Rellena los campos del formulario con los datos del usuario

                            //Datos Personales
                            $("#editNombree").val(userData.uName);
                            $("#editApellidoe").val(userData.uLastName);
                            $("#tipoDocumentoed").val(userData.dtID);
                            $("#editDocumentoed").val(userData.uDocument);
                            $("#tGeneroed").val(userData.gID)
                            $("#fechaNacimientoed").val(userData.uBirthDate)


                            //Datos de Contacto
                            $("#editCorreoed").val(userData.uEmailAddress);
                            $("#direccioned").val(userData.uAddress);
                            $("#editCelulared").val(userData.uCellphone);
                            //Datos de Cuenta
                            $("#tipoUsuarioed").val(userData.utID);
                            $("#usernameed").val(userData.uLoginName);

                            //Datos de Estudios
                            $("#TituloAcademicoed").val(userData.dDegree);
                            $("#AcademicLeveled").val(userData.dAcademicLevel);
                            $("#Specialityed").val(userData.dSpeciality);
                            $("#ProfessionalLicenseed").val(userData.dProfessionalCard);
                            $("#Universitynameed").val(userData.dUniversityName);
                        }
                        // Abre el modal de edición
                        $("#editModal").modal("show");

                        $("#saveChangesBtn").click(function () {
                            //let status = $("#editStatus").val() == "Activo" ? true : false;
                            // let DoctorModel = {
                            //     //Datos de Estudios
                            //     dAcademicLevel: $("#AcademicLevel").val(),
                            //     dDegree: $("#TituloAcademico").val(),
                            //     dSpeciality: $("#Speciality").val(),
                            //     dProfessionalCard: $("#ProfessionalLicense").val(),
                            //     dUniversityName: $("#Universityname").val(),
                            // };

                            //console.log("DoctorModel" + DoctorModel.dAcademicLevel);
                            // Obtén los datos actualizados del formulario de edición
                            // let birthDate = document.getElementById("fechaNacimientoe").value.trim();
                            // let formattedBirthDate = formatToDatetime(birthDate);

                            let updatedUserData = {
                                // Recoge los datos actualizados desde los campos del formulario

                                //Datos Personales
                                uName: $("#editNombree").val(),
                                uLastName: $("#editApellidoe").val(),
                                dtID: parseInt($("#tipoDocumentoed").val()),
                                uDocument: $("#editDocumentoed").val(),
                                gID: parseInt($("#tGeneroed").val()),
                                uBirthDate: $("#fechaNacimientoed").val(),

                                //Datos de Contacto
                                uEmailAddress: $("#editCorreoed").val(),
                                uCellphone: $("#editCelulared").val(),
                                uAddress: $("#direccioned").val(),

                                //Datos de Cuenta
                                uLoginName: $("#usernameed").val(),
                                uID: userId,
                                utID: parseInt($("#tipoUsuarioed").val()),
                                uStatus: true,
                                oID: 1,
                                dAcademicLevel: null,
                                dDegree: null,
                                dSpeciality: null,
                                dProfessionalCard: null,
                                dUniversityName: null

                            }
                            console.log("Datos del Usuario ");
                            if (updatedUserData.utID == 2) {
                                updatedUserData.dAcademicLevel = $("#AcademicLeveled").val();
                                updatedUserData.dDegree = $("#TituloAcademicoed").val();
                                updatedUserData.dSpeciality = $("#Specialityed").val();
                                updatedUserData.dProfessionalCard = $("#ProfessionalLicenseed").val();
                                updatedUserData.dUniversityName = $("#Universitynameed").val();
                            }
                            console.log(updatedUserData);


                            console.log("Usuario a Editar Genero:" + updatedUserData.gID)
                            // Realiza una solicitud AJAX para guardar los cambios en el servidor
                            $.ajax({
                                url: sessionStorage.urlEP + '/api/Users/v1/CreateUpdateUsers', // Reemplaza con la URL correcta
                                type: 'POST',
                                data: JSON.stringify(updatedUserData), // Convierte updatedUserData a JSON
                                contentType: "application/json", // Especifica el tipo de contenido
                                dataType: "json",
                                success: function (response) {
                                    // Cierra el modal de edición
                                    $("#editModal").modal("hide");
                                    verusers(updatedUserData.utID);
                                    Swal.fire({
                                        title: 'Usuario Actualizado',
                                        text: 'El usuario ' + updatedUserData.uLoginName + ' se actualizó correctamente',
                                        icon: 'success',
                                        confirmButtonText: 'Aceptar'
                                    });
                                    // Puedes realizar otras acciones después de guardar los cambios si es necesario
                                    // Por ejemplo, actualizar la tabla con los datos modificados
                                    // o mostrar un mensaje de éxito
                                },
                                error: function () {
                                    $("#editModal").modal("hide");
                                    Swal.fire({
                                        title: 'Error',
                                        text: 'Error al guardar los cambios',
                                        icon: 'error',
                                        confirmButtonText: 'Aceptar'
                                    });
                                }
                            });
                        });
                    });

                    //Desactivar Estado --> Funcionando Bien
                    table.column(11).nodes().to$().find('#btnDesactivar').click(function () {
                        let StatusMappingI = {
                            Activo: 1,
                            Inactivo: 0
                        };


                        let rolesMappingI = {
                            Administrador: 1,
                            Doctores: 2,
                            Pacientes: 3
                        };
                        let data = table.row($(this).parents('tr')).data();
                        let userId = data[0];
                        let utID = data[1];
                        let loginName = data[2];
                        let userName = data[3] + ' ' + data[4];
                        let StatusI = StatusMappingI[data[10]]; // Supongo que obtienes el estado del usuario de alguna parte
                        let estadoActual = data[10];
                        console.log("Documento" + loginName + " User ID: " + userId);
                        console.log("Estado" + estadoActual);
                        console.log("Estado Mapeado " + StatusI)
                        let action = StatusI === 1 ? 'desactivar' : 'activar';
                        let uRol = rolesMappingI[utID];
                        // Muestra un mensaje de confirmación antes de realizar la acción
                        Swal.fire({
                            title: 'Estas seguro de ' + action + ' a:',
                            text: ' ' + userName + ' !',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Si, ' + action,
                            cancelButtonText: 'Cancelar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                let newStatus = StatusI === 1 ? 0 : 1;

                                // Realiza la solicitud AJAX para cambiar el estado del usuario
                                $.ajax({
                                    url: sessionStorage.urlEP + '/api/Users/v1/SetUserStatus/',
                                    type: 'GET',
                                    data: { 'uID': userId, 'uStatus': newStatus },
                                    contentType: "application/json",
                                    dataType: 'json',
                                    success: function (response) {
                                        console.log("Respuesta del Servidor " + response);
                                        console.log("Rol del Usuario desactivado " + uRol);
                                        Swal.fire({
                                            title: 'Usuario ' + action.charAt(0).toUpperCase() + action.slice(1), // Capitalizar la acción
                                            text: 'El usuario ' + loginName + ' se ' + action + 'ó correctamente',
                                            icon: 'success',
                                            confirmButtonText: 'Aceptar'
                                        });
                                        verusers(uRol);
                                    },
                                    error: function () {
                                        Swal.fire({
                                            title: 'Error',
                                            text: 'Error al ' + action + ' el usuario',
                                            icon: 'error',
                                            confirmButtonText: 'Aceptar'
                                        });
                                    }
                                });
                            }
                        });



                        //// Maneja la acción de desactivación aqui
                        //let data = table.row($(this).parents('tr')).data();
                        //let userId = data[0];
                        //let loginName = data[2];
                        //let userName = data[3] + ' ' + data[4];

                        //console.log("Documento" + loginName + " User ID: " + userId);
                        ////var userId = data[0]; // Obtén el ID del usuario desde el botón
                        //let dataUser = {
                        //    uID: userId,
                        //    uStatus: 0
                        //}; //Ajustar para enviar si esta inactivo activar si esta activo desactivar
                        //// Muestra un mensaje de confirmación antes de desactivar el usuario

                        //Swal.fire({
                        //    title: 'Estas seguro de Desactivar? a:',
                        //    text: ' ' + userName + ' !',
                        //    icon: 'warning',
                        //    showCancelButton: true,
                        //    confirmButtonColor: '#3085d6',
                        //    cancelButtonColor: '#d33',
                        //    confirmButtonText: 'Si, desactivar',
                        //    cancelButtonText: 'Cancelar'
                        //}).then((result) => {
                        //    if (result.isConfirmed) {
                        //        //console.log("Desactivar 2" + userId);
                        //        // Realiza la solicitud AJAX para desactivar el usuario
                        //        $.ajax({
                        //            url: sessionStorage.urlEP + '/api/Users/v1/SetUserStatus/',
                        //            type: 'POST',
                        //            data: JSON.stringify(dataUser),
                        //            contentType: "application/json",
                        //            //async: false,
                        //            dataType: "json",
                        //            success: function (response) {
                        //                console.log("Respuesta del Servidor " + response);

                        //                Swal.fire({
                        //                    title: 'Usuario Desactivado',
                        //                    text: 'El usuario' + data[0] + 'se desactivó correctamente',
                        //                    icon: 'success',
                        //                    confirmButtonText: 'Aceptar'
                        //                });


                        //            },
                        //            error: function () {
                        //                Swal.fire({
                        //                    title: 'Error',
                        //                    text: 'Error al deshabilitar el usuario',
                        //                    icon: 'error',
                        //                    confirmButtonText: 'Aceptar'
                        //                });
                        //            }
                        //        });
                        //    }
                        //});

                    });
                    //Cambiar contraseña Estado --> Funcionando Bien
                    table.column(11).nodes().to$().find('#btnPassword').click(function () {
                        // Maneja la acción del botón aqui
                        let data = table.row($(this).parents('tr')).data();

                        let userId = data[0]; // Supongamos que la primera columna contiene el ID del usuario
                        console.log("contraseña " + userId)
                        let userNameEdit = data[3] + ' ' + data[4];
                        let userRol = data[1];
                        let rolesMappingI = {
                            Administrador: 1,
                            Doctores: 2,
                            Pacientes: 3
                        };
                        let uRol = rolesMappingI[userRol];
                        //$("#usernamepass").val(userNameEdit);
                        var userNamePassSpan = document.getElementById("userNamePass");

                        // Establece el contenido del span
                        userNamePassSpan.innerHTML = userNameEdit;
                        // Abre el modal de edición
                        $("#editPassword").modal("show");


                        console.log("Usuario a Editar" + userId);
                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $("#changePasswordBtn").click(function () {

                            let password = $("#newPassword").val();
                            if (!CheckPass(password)) {
                                Swal.fire({
                                    text: 'La contraseña no cumple con los requisitos.',
                                    confirmButtonColor: '#008dc9'
                                });
                            } else {
                                // Obtén los datos actualizados del formulario de edición
                                let updatedUserData = {
                                    // Recoge los datos actualizados desde los campos del formulario
                                    uID: userId,
                                    Password: password
                                };
                                // Realiza una solicitud AJAX para guardar los cambios en el servidor
                                $.ajax({
                                    url: sessionStorage.urlEP + '/api/Users/v1/ChangePassword', // Reemplaza con la URL correcta
                                    type: 'POST',
                                    data: JSON.stringify(updatedUserData), // Convierte updatedUserData a JSON
                                    contentType: "application/json", // Especifica el tipo de contenido
                                    dataType: "json",
                                    success: function (response) {
                                        // Cierra el modal de edición
                                        if (response.codeStatus == 0) {
                                            $("#editPassword").modal("hide");
                                            //window.location.href = '@Url.Action("Index", "")';
                                            Swal.fire({
                                                text: 'contraseña actualizada con exito',
                                                confirmButtonColor: '#008dc9'
                                            });
                                            verusers(uRol);
                                        } else {

                                            Swal.fire({
                                                text: "Hubo un fallo" + response.messageStatus,
                                                confirmButtonColor: '#008dc9'
                                            });
                                            //alert('Inicio de sesión fallido, ' + response.messageStatus);
                                        }


                                        // Puedes realizar otras acciones después de guardar los cambios si es necesario
                                        // Por ejemplo, actualizar la tabla con los datos modificados
                                        // o mostrar un mensaje de éxito
                                    },
                                    error: function () {
                                        // $("#editModal").modal("hide");
                                        // Swal.fire({
                                        //     title: 'Error',
                                        //     text: 'Error al guardar los cambios',
                                        //     icon: 'error',
                                        //     confirmButtonText: 'Aceptar'
                                        // });
                                    }
                                });
                            }
                        });
                    });

                }
            });
        };
        function CheckPass(password) {
            // Requiere al menos 8 caracteres
            if (password.length < 8) {
                return false;
            }
            // Requiere al menos una letra minuscula
            if (!/[a-z]/.test(password)) {
                return false;
            }
            // Requiere al menos una letra mayuscula
            if (!/[A-Z]/.test(password)) {
                return false;
            }
            // Requiere al menos un digito
            if (!/\d/.test(password)) {
                return false;
            }
            // agregar requisitos adicionales aqui, como caracteres especiales
            // if (!/[!#$%^&*()_+{ }\[\]:;<>,.?~\\-]/.test(password)) {
            //     return false;
            // }

            return true;
        }

        $(".add-user-btn").click(function () {
            // Abre el modal de agregar usuario
            $("#addUserModal").modal("show");
        });

        // Función para permitir solo numeros en un campo de entrada
        function allowNumbersOnly(inputField) {
            inputField.value = inputField.value.replace(/[^0-9]/g, '');
        }

        // Aplica la función a los campos de celular y numero de documento
        $("#celular").on("input", function () {
            allowNumbersOnly(this);
        });

        $("#numeroDocumento").on("input", function () {
            allowNumbersOnly(this);
        });

        // Controlador de clic para el botón "Agregar"
        $("#add-user").click(function () {
            // Obtiene los datos del formulario
            // let DoctorModel = {
            //     //Datos de Estudios
            //     dAcademicLevel: $("#AcademicLevela").val(),
            //     dDegree: $("#TituloAcademicoa").val(),
            //     dSpeciality: $("#Specialitya").val(),
            //     dProfessionalCard: $("#ProfessionalLicensea").val(),
            //     dUniversityName: $("#Universitynamea").val(),
            // };
            // let birthDate = document.getElementById("fechaNacimiento").value.trim();
            // let formattedBirthDate = formatToDatetime(birthDate);
            let userData = {
                //Datos Personales
                uName: $("#nombres").val(),
                uLastName: $("#apellidos").val(),
                dtID: parseInt($("#tipoDocumento").val()),
                uDocument: $("#numeroDocumento").val(),
                //gID: 0,//parseInt($("tGeneroe").val()),
                gID: $("#tipoGenero").val(),
                uBirthDate: $("#fechaNacimiento").val(),

                //Datos de Contacto
                uEmailAddress: $("#correo").val(),
                uCellphone: $("#celular").val(),
                uAddress: $("#direccion").val(),

                //Datos de Cuenta
                uLoginName: $("#usuario").val(),
                uPassword: $("#password").val(),
                uID: 0,
                utID: parseInt($("#tipoUsuario").val()),
                uStatus: true,
                oID: 1,
                dAcademicLevel: null,
                dDegree: null,
                dSpeciality: null,
                dProfessionalCard: null,
                dUniversityName: null
            };
            if (userData.utID == 2) {
                userData.dAcademicLevel = $("#AcademicLevela").val();
                userData.dDegree = $("#TituloAcademicoa").val();
                userData.dSpeciality = $("#Specialitya").val();
                userData.dProfessionalCard = $("#ProfessionalLicensea").val();
                userData.dUniversityName = $("#Universitynamea").val();
            }

            //Validar campos obligatorios

            //if (!userData.nombres || !userData.apellidos || !userData.tipoDocumento || !userData.numeroDocumento || !userData.usuario || !userData.password || !userData.tipoUsuario) {
            //    mostrarMensajeError('Por favor, complete todos los campos obligatorios.');
            //    return;
            //}



            // Validación de la contraseña
            let password = userData.uPassword;
            let passwordError = CheckPass(password);

            if (passwordError) {
                mostrarMensajeError(passwordError);
                return;
            }
            function CheckPass(password) {
                if (password.length < 8) {
                    return "La contraseña debe tener al menos 8 caracteres.";
                }

                if (!/[A-Z]/.test(password)) {
                    return "La contraseña debe contener al menos una letra mayuscula.";
                }

                if (!/[a-z]/.test(password)) {
                    return "La contraseña debe contener al menos una letra minuscula.";
                }

                if (!/\d/.test(password)) {
                    return "La contraseña debe contener al menos un numero.";
                }

                return null; // Si la contraseña cumple con los requisitos, retorna null
            }

            function mostrarMensajeError(mensaje) {
                Swal.fire({
                    title: 'Error',
                    text: mensaje,
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
            }

            // Realiza una solicitud AJAX para agregar el usuario en el servidor
            $.ajax({
                type: "POST",
                url: sessionStorage.urlEP + '/api/Users/v1/CreateUpdateUsers', // Ruta para agregar el usuario
                data: JSON.stringify(userData), // Convierte userData a JSON
                contentType: "application/json", // Especifica el tipo de contenido

                dataType: "json",
                success: function (result) {
                    // Actualiza la vista o realiza alguna otra acción
                    $("#addUserModal").modal("hide");
                    //alert("Usuario agregado correctamente");
                    // Cierra el modal de agregar usuario
                    Swal.fire({
                        title: 'Usuario Agregado',
                        text: 'El usuario se agregó correctamente',
                        icon: 'success',
                        confirmButtonText: 'Aceptar'
                    });
                },
                error: function () {
                    //alert("Error al agregar el usuario");
                    Swal.fire({
                        title: 'Error',
                        text: 'Error al agregar el usuario',
                        icon: 'error',
                        confirmButtonText: 'Aceptar'
                    });
                }
            });
        });


        // Obtén una referencia al campo de fecha de nacimiento
        const fechaNacimientoInput = document.getElementById('fechaNacimiento');

        // Agrega un oyente de eventos al cambio de valor en el campo
        fechaNacimientoInput.addEventListener('change', function () {
            // Obtén la fecha de nacimiento ingresada por el usuario
            const fechaNacimiento = new Date(this.value);

            // Calcula la fecha actual
            const fechaActual = new Date();

            // Calcula la edad en años
            const edad = fechaActual.getFullYear() - fechaNacimiento.getFullYear();

            // Verifica si la edad es menor de 18 años
            if (edad < 18) {
                //alert('Debes ser mayor de 18 años para registrarte.');
                Swal.fire({
                    title: 'Error',
                    text: 'Debes ser mayor de 18 años para registrarte.',
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
                // Puedes agregar aquí más acciones si la validación falla, como borrar la fecha o mostrar un mensaje de error.
            }
        });


        // function mostrarCarga() {
        //     // Ocultar el contenido suavemente
        //     $('#content-container').addClass('hide-content');

        //     Swal.fire({
        //         title: 'Cargando',
        //         html: 'Por favor, espere un momento',
        //         timer: 1000,
        //         timerProgressBar: true,
        //         didOpen: () => {
        //             Swal.showLoading();
        //         },
        //         willClose: () => {
        //             // Aqui puedes realizar acciones adicionales después de que se cierre la ventana de carga, si es necesario.
        //             // Por ejemplo, mostrar el contenido nuevamente.
        //             $('#content-container').removeClass('hide-content');
        //         }
        //     });
        // }
        function mostrarCargando() {
            Swal.fire({
                title: 'Cargando',
                text: 'Por favor, espere un momento...',
                showCancelButton: false,
                showConfirmButton: false,
                allowOutsideClick: false,
                onBeforeOpen: () => {
                    Swal.showLoading();
                }
            });
        }


        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

        });

    </script>
    @*  <script src="~/assets/js/control/tablesutilities.js" charset="utf-8"></script> *@

    }
