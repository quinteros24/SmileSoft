@{
    ViewData["Title"] = "Iniciar Sesión";
}
@model LoginViewModel

@*     @Html.AntiForgeryToken() *@

<section class="container flex-grow-1">
    @*  <div id="loader" class="loader"></div> *@
    <div class="row justify-content-center">
        <div class="col-md-9 col-lg-12 col-xl-10 loginContainer">
            <div class="card shadow-lg o-hidden border-0 my-5 " id="loginBox">
                <div class="card-body p-0" id="loginBody">
                    <div class="row">
                        <div class="col-lg-6 d-none d-lg-flex">
                            <div class="flex-grow-1 bg-login-image d-flex ms-5"></div>
                            <img id="imgLogin" src="~/assets/img/logo-r.png" onerror="this.onerror=null;this.src='~/assets/img/logo-r.png';" class="img-fluid">
                        </div>

                        @* <div class="col-lg-6" style="display: none">
                        <div class="p-5">
                        <div class="text-center">
                        <h4 class="text-dark mb-4"><strong>Iniciar Sesión</strong></h4>
                        </div>
                        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
                        {
                        <div class="alert alert-danger">
                        @ViewBag.ErrorMessage
                        @ViewBag.urlEndPoint
                        @ViewBag.jsonUsuario
                        </div>
                        }


                        @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { @class = "user needs-validation", novalidate = "novalidate" }))
                        {
                        <div class="form-group">
                        <div class="mb-3">
                        @Html.LabelFor(model => model.UserLogin, new { @class = "control-label" })

                        @Html.TextBoxFor(model => model.UserLogin, new { @class = "form-control border rounded-5", placeholder = "Nombre de Usuario", required = "required" })
                        </div>
                        <div class="invalid-feedback">Por favor, ingrese su nombre de usuario.</div>
                        </div>
                        <div class="form-group">
                        <div class="mb-3">
                        @Html.LabelFor(model => model.password, new { @class = "control-label" })
                        @Html.PasswordFor(model => model.password, new { @class = "form-control border rounded-5", placeholder = "Contraseña", required = "required" })
                        <div class="invalid-feedback">Por favor, ingrese su contraseña.</div>
                        </div>
                        </div>
                        <button type="submit" class="btn btn-primary d-block btn-user w-100 fs-6">Iniciar Sesión</button>
                        }

                        <hr />

                        @*  <form class="user">
                        @using (Html.BeginForm("Login", "Account", FormMethod.Post))
                        {
                        @Html.LabelFor(model => model.UserLogin)
                        @Html.TextBoxFor(model => model.UserLogin)
                        <br />
                        @Html.LabelFor(model => model.password)
                        @Html.PasswordFor(model => model.password)
                        <br />
                        <input type="submit" value="Iniciar Sesión" />
                        }
                        </form> @
                        <div class="row">

                        <div class="col-md-6 mb-3">
                        <a class="btn btn-primary d-block btn-user w-100 border rounded-5" asp-controller="Account" asp-action="Register">Registrarse</a>
                        </div>
                        <div class="col-md-6 mb-3">
                        <a class="btn btn-primary d-block btn-user w-100 border rounded-5" asp-controller="Account" asp-action="RequestanAppointment">Solicitar una Cita</a>

                        </div>
                        </div>
                        </div>
                        </div> *@

                        <div class="col-lg-6">
                            <div class="p-5">
                                <div class="text-center">
                                    <h4 class="text-dark mb-4"><strong>Iniciar Sesión</strong></h4>
                                </div>
                                <form class="user needs-validation" novalidate>
                                    <div class="mb-3">
                                        <input class="form-control form-control-user" type="text" id="UserLogin" aria-describedby="emailHelp" placeholder="Usuario" name="Username" autocomplete="username">
                                    </div>
                                    <div class="mb-3">
                                        <input class="form-control form-control-user" type="password" id="Password" placeholder="Contraseña" name="password" autocomplete="current-password">
                                    </div>
                                    <div class="mb-3">
                                        <div class="custom-control custom-checkbox small">
                                            <div class="form-check"><input class="form-check-input custom-control-input" type="checkbox" id="remember_me"><label class="form-check-label custom-control-label" for="remember_me">Recordarme</label></div>
                                        </div>
                                    </div><button class="btn btn-primary d-block btn-user w-100 fs-6" type="button" onclick="validarInicioSesion();"><strong>Ingresar</strong></button>
                                    <hr>

                                </form>
                                @*<div class="text-center"><a class="small" asp-controller="Account" asp-action="ForgotPassword">Olvidaste la Contraseña?</a></div>*@
                                <div class="row">

                                    <div class="col-lg-6 col-md-6 mb-3">
                                        <a class="btn btn-primary d-block btn-user w-100 border rounded-5" asp-controller="Account" asp-action="Register">Registrarse</a>
                                    </div>
                                    <div class="col-lg-6 col-md-6 mb-3">
                                        <a class="btn btn-primary d-block btn-user w-100 border rounded-5" asp-controller="Account" asp-action="RequestanAppointment">Solicitar una Cita</a>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    @*  <script src="~/assets/js/Login.js" asp-append-version="true"></script> *@

    <script src="~/assets/js/typebot.js" type="module"></script>
    <script>
        var ipAddressNet = '';
        $(document).ready(function () {
            localStorage.setItem('urlImageLogin', 'https://smilesoftblobs.blob.core.windows.net/smilesoftimages/SMILESOFT.png')
            localStorage.setItem('urlImageMenu', 'https://smilesoftblobs.blob.core.windows.net/smilesoftimages/SMILESOFTMENU.png')
            localStorage.setItem('backgroundColor', '#ffffff')
            localStorage.setItem('topColor', '#088ccc')
            localStorage.setItem('sideColor', '#ffffff')
            fetch('https://ipinfo.io/json')
                .then(response => response.json())
                .then(data => {
                    ipAddressNet = data.ip;
                    ipAddressNet = ipAddressNet.substring(0, ipAddressNet.lastIndexOf('.'))
                })
                .catch(error => console.error('Error al obtener la IP', error));

            if (ipAddressNet != undefined && ipAddressNet != null && ipAddressNet != '') {
                $.ajax({
                    url: sessionStorage.urlEP + '/api/Generics/v1/GetDataSite?IP=' + ipAddressNet,
                    type: 'GET',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (response) {
                        localStorage.setItem("urlImageLogin", response.itemJson.urlImageLogin);
                        localStorage.setItem("urlImageMenu", response.itemJson.urlImageMenu);
                        localStorage.setItem("backgroundColor", response.itemJson.backgroundColor);
                        localStorage.setItem("topColor", response.itemJson.topColor);
                        localStorage.setItem("sideColor", response.itemJson.sideColor);
                        $('#imgLogin').attr('src', response.itemJson.urlImageLogin);
                    }
                });
            }
        })


        function validarInicioSesion() {
            ////console.log("Script Iniciar Sesion");
            // event.preventDefault();
            const urlEP = '@ViewBag.urlEndPoint';
            sessionStorage.setItem("urlEP", urlEP);

            let username = document.getElementById("UserLogin").value;
            let password = document.getElementById("Password").value;

            if (ipAddressNet == undefined) ipAddressNet = '';

            if (username === "") {
                Swal.fire({
                    text: 'Por favor, ingrese su nombre de usuario',
                    confirmButtonColor: '#008dc9'
                });
            } else if (password === "") {
                Swal.fire({
                    text: 'Por favor, ingrese su contraseña',
                    confirmButtonColor: '#008dc9'
                });
            } else {

                let data = {
                    UserLogin: username,
                    password: password,
                    ipAddress: ipAddressNet
                };
                mostrarCarga();
                $.ajax({

                    type: "POST",
                    url: '@ViewBag.urlEndPoint' + '/api/Session/v1/Login',
                    data: JSON.stringify(data),
                    contentType: "application/json",

                    dataType: "json",
                    success: function (response) {

                        if (response.codeStatus == 0) {
                            //localStorage.setItem('tutorial', false);
                            //Si tutorial no existe en el local storage, se crea y se le asigna el valor false
                            //si ya existe no la cambiara
                            if (localStorage.getItem('tutorial') == null) {
                                localStorage.setItem('tutorial', false);
                            }
                            sessionStorage.setItem('accessToken', response.itemJson.uToken);
                            sessionStorage.setItem('userRole', response.itemJson.utID);
                            sessionStorage.setItem('userID', response.itemJson.uID);
                            sessionStorage.setItem('userFName', response.itemJson.uName);
                            sessionStorage.setItem('userLName', response.itemJson.uLastName);
                            sessionStorage.setItem('userLogin', response.itemJson.uLoginName);
                            sessionStorage.setItem('userEmail', response.itemJson.uEmailAddress);
                            sessionStorage.setItem('userPhone', response.itemJson.uCellphone);
                            sessionStorage.setItem('userAddress', response.itemJson.uAddress);
                            sessionStorage.setItem('usertDocument', response.itemJson.dtID);
                            sessionStorage.setItem('userDocument', response.itemJson.uDocument);
                            //sessionStorage.setItem('userBirthDate', response.itemJson.uBirthDate);
                            //sessionStorage.setItem('userGender', response.itemJson.uGender);
                            sessionStorage.setItem('userBlock', response.itemJson.uIsBlocked);
                            sessionStorage.setItem('userStatus', response.itemJson.uStatus);
                            sessionStorage.setItem('doctorID', response.itemJson.dID);
                            if (response.itemJson.uStatus == false) {
                                Swal.fire({
                                    text: 'Su cuenta se encuentra bloqueada',
                                    confirmButtonColor: '#008dc9'
                                });
                            }
                            // window.location.href = '@Url.Action("Index", "Home")';
                            else if (response.itemJson.utID === 1) {
                                // Redirige al administrador a la vista de administrador
                                window.location.href = '@Url.Action("Index", "Admin")';
                            } else if (response.itemJson.utID === 2) {
                                // Redirige al doctor a la vista de doctor
                                window.location.href = '@Url.Action("Index", "Doctor")';
                            } else if (response.itemJson.utID === 3) {
                                // Redirige al usuario a la vista de usuario
                                window.location.href = '@Url.Action("Index", "Patient")';
                            } else {
                                // Manejar el caso de un rol desconocido o no autorizado
                                //alert('Rol desconocido o no autorizado');
                                Swal.fire({
                                    text: 'Rol desconocido o no autorizado',
                                    confirmButtonColor: '#008dc9'
                                });
                            }
                        } else {

                            Swal.fire({
                                text: "Inicio de sesión fallido. " + response.messageStatus,
                                confirmButtonColor: '#008dc9'
                            });
                            //alert('Inicio de sesión fallido, ' + response.messageStatus);
                        }
                    },
                    error: function (error) {
                        ////console.log("Error.");
                        Swal.fire({
                            text: "Error. " + error,
                            confirmButtonColor: '#008dc9'
                        });
                    }
                });
            }
        }</script>
    <script>
        function mostrarCarga() {
            Swal.fire({
                title: 'Cargando',
                html: 'Por favor, espere un momento',
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
            });
        }
    </script>
}