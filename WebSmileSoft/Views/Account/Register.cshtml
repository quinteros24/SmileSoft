@{
    ViewData["Title"] = "Registrarte";
}
<section class="container flex-grow-1">
    <div class="row justify-content-center">
        <div class="col-md-9 col-lg-12 col-xl-10">
            <div class="card shadow-lg o-hidden border-0">
                <div class="card-body p-5 shadow">
                    <div class="row">
                        <div class="d-flex flex-column align-items-center">
                            <img src="~/assets/img/logo-2.png" class="img-fluid w-25" alt="SmileSoftLogo">
                        </div>

                        <form class="row p-5" id="registerForm">
                            <div class="col-md-6 mb-3">
                                <label class="visually-hidden" for="userFirstNameRegister">Nombres</label>
                                <div class="input-group">
                                    <div class="input-group-text">Nombres</div>
                                    <input type="text" class="form-control" id="userFirstNameRegister" oninput="generateUsername()" required>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="visually-hidden" for="userLastNameRegister">Apellidos</label>
                                <div class="input-group">
                                    <div class="input-group-text">Apellidos</div>
                                    <input type="text" class="form-control" id="userLastNameRegister" oninput="generateUsername()" required>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="visually-hidden" for="tipo_documento">Tipo de Documento</label>
                                <div class="input-group">
                                    <div class="input-group-text">Tipo de Documento</div>
                                    <select id="tipo_documento" class="form-select" required>
                                        <option value="1">Cedula de Ciudadania</option>
                                        <option value="2">Cedula de Extranjeria</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="input-group">
                                    <!--<label class="form-outline" for="IdNumber">Numero</label>-->
                                    <span class="input-group-text" id="inputGroup-sizing-default">Documento</span>
                                    <input type="text" id="IdNumber" class="form-control" required />
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="input-group">
                                    <span class="input-group-text">Fecha de nacimiento</span>
                                    <input type="date" id="birthDate" class="form-control " placeholder="YYYY-MM-DD" required />
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="input-group" id="genderOptions">
                                    <label class="input-group-text" for="genderSelect">Género</label>
                                    <select class="form-select" id="genderSelect">
                                        <option value="0">Seleccionar</option>
                                        <option value="1">Masculino</option>
                                        <option value="2">Femenino</option>
                                        <option value="0">Otro</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class=" input-group">
                                    <span class="input-group-text">Dirección</span>
                                    <input type="text" id="address" class="form-control" required />
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="input-group">
                                    <span class="input-group-text">Numero de celular</span>
                                    <input type="number" id="mobileNumber" class="form-control" required />
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="input-group ">
                                    <span class="input-group-text">Correo electrónico</span>
                                    <input type="email" id="email" class="form-control " placeholder="usuario@example.com" required />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="input-group ">
                                    <span class="input-group-text">Nombre de Usuario</span>
                                    <input type="text" id="userNameRegister" class="form-control" autocomplete="username" required />
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="input-group ">
                                    <span class="input-group-text">Contraseña</span>
                                    <input type="password" id="password" class="form-control" placeholder="" autocomplete="new-password" required />
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text">Confirmar contraseña</span>
                                    <input type="password" id="confirmPassword" class="form-control"
                                           placeholder="" autocomplete="new-password" required />
                                </div>
                            </div>

                            <div id="passwordHelpBlock" class="form-text">
                                Tu contraseña debe ser minimo de 8 caracteres, debe contener letras, números o caracteres
                                especiales, y no debe contener espacios o emojis.
                            </div>

                        </form>
                        <div class="text-end mt-4">
                            <button type="button" class="btn btn-primary d-block btn-user w-100" onclick="registrarUsuario();">
                                <strong>Registrarte</strong>
                            </button>
                        </div>
                        <hr>
                        <div class="text-center"><a class="small" href="@Url.Action("Login","Account")">Ya tienes Cuenta? Inicia Sesión!</a></div>
                        <div class="form-check" style="display:none"><input class="form-check-input custom-control-input" type="checkbox" id="remember_me"><label class="form-check-label custom-control-label" for="remember_me">Recordarme</label></div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/additional-methods.min.js" asp-append-version="true"></script>

    <script>
        
        $(document).ready(function () {
            // Get the current date
            const currentDate = new Date();

            // Calculate the date 18 years ago
            const maxDate = new Date(currentDate.getFullYear() - 18, currentDate.getMonth(), currentDate.getDate());

            // Format the date as YYYY-MM-DD
            const maxDateString = maxDate.toISOString().split('T')[0];

            // Set the max attribute of the input element
            document.getElementById('birthDate').setAttribute('max', maxDateString);
        });
    </script>

    @* @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    } *@
    <script>
        function validarEdadMayorDe18(idCampoFechaNacimiento) {
            const fechaNacimientoInput = document.getElementById(idCampoFechaNacimiento);
            const fechaNacimiento = new Date(fechaNacimientoInput.value);

            // Calcula la fecha actual
            const fechaActual = new Date();

            // Calcula la edad en años
            const edad = fechaActual.getFullYear() - fechaNacimiento.getFullYear();

            // Verifica si la edad es menor de 18 años
            if (edad < 18) {
                // Muestra un mensaje de error utilizando SweetAlert2
                Swal.fire({
                    title: 'Error',
                    text: 'Debes ser mayor de 18 años',
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });

                // Retorna false para indicar que la validación falló
                return false;
            }
            
            // Retorna true si la validación pasó exitosamente
            return true;
        }
        // Ejemplo de cómo llamar a la función de validación
        // const esMayorDe18 = validarEdadMayorDe18('fechaNacimientoed');

        // if (esMayorDe18) {
        //     // Continuar con el proceso si la validación es True
        function onChangeAgeNotification(idCampoFecha) {
            idCampoFecha.addEventListener('change', function () {
                // Obtén la fecha de nacimiento ingresada por el usuario
                const fechaNacimiento = new Date(this.value);

                // Calcula la fecha actual
                const fechaActual = new Date();

                // Calcula la edad en años
                const edad = fechaActual.getFullYear() - fechaNacimiento.getFullYear();

                // Verifica si la edad es menor de 18 años
                if (edad < 18) {
                    //alert('Debes ser mayor de 18 años para registrarte.');
                    Swal.fire({
                        title: 'Error',
                        text: 'El usuario debe ser mayor de 18 años',
                        icon: 'error',
                        confirmButtonText: 'Aceptar'
                    });
                    // Puedes agregar aquí más acciones si la validación falla, como borrar la fecha o mostrar un mensaje de error.
                }
            });
        }


        //debugger;
        function CheckPass(password) {
            if (password.length < 8) {
                return false;
            }

            if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\d/.test(password)) {
                return false;
            }

            return true; // Si la contraseña cumple con los requisitos, retorna null
        }
        // Función para permitir solo numeros en un campo de entrada
        function allowNumbersOnly(inputField) {
            inputField.value = inputField.value.replace(/[^0-9]/g, '');
        }

        
        function mostrarCargando() {
            Swal.fire({
                title: 'Cargando',
                text: 'Por favor, espere un momento...',
                showCancelButton: false,
                showConfirmButton: false,
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
        }

        function mostrarMensajeError(mensaje) {
            Swal.fire({
                title: 'Error',
                text: mensaje,
                icon: 'error',
                confirmButtonText: 'Aceptar'
            });
        }
        document.addEventListener("DOMContentLoaded", function () {
            const buttons = document.querySelectorAll(".btn-en-desarrollo");

            buttons.forEach(function (button) {
                button.addEventListener("click", function () {
                    event.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Este Modulo esta en Desarrollo!',
                        confirmButtonColor: '#008dc9'
                    })
                });
            });
        });
    </script>
    <script>

        function ageValidation(birthDate) {
            const fechaNac = new Date(birthDate);
            const edad = (new Date()).getFullYear() - fechaNac.getFullYear() - (new Date().getMonth() < fechaNac.getMonth() || (new Date().getMonth() === fechaNac.getMonth() && new Date().getDate() < fechaNac.getDate()));
            return edad >= 18;
        }

        function generateUsername() {
            const firstName = document.getElementById("userFirstNameRegister").value.trim();
            const lastName = document.getElementById("userLastNameRegister").value.trim();
            const baseUsername = `${firstName}.${lastName}`.toLowerCase().replace(/\s/g, "");
            const randomSuffix = Math.floor(Math.random() * 999) + 1;
            const suggestedUsername = `${baseUsername}${randomSuffix}`;
            document.getElementById("userNameRegister").value = suggestedUsername;
        }
        // Obtén una referencia al campo de fecha de nacimiento
        const fechaNacimientoInput = document.getElementById('birthDate');
        onChangeAgeNotification(fechaNacimientoInput);

        function registrarUsuario() {
            let firstName = document.getElementById("userFirstNameRegister").value.trim();
            let lastName = document.getElementById("userLastNameRegister").value.trim();
            let documentID = document.getElementById("IdNumber").value.trim();
            let address = document.getElementById("address").value.trim();
            let mobileNumber = document.getElementById("mobileNumber").value.trim();
            let email = document.getElementById("email").value.trim();
            let userRegister = document.getElementById("userNameRegister").value.trim();
            let password = document.getElementById("password").value.trim();
            let confirmPassword = document.getElementById("confirmPassword").value.trim();
            let birthDate = document.getElementById("birthDate").value.trim();
            let documentType = parseInt(document.getElementById("tipo_documento").value.trim(), 10);

            let genderSelect = document.getElementById("genderSelect");
            let gender = genderSelect.options[genderSelect.selectedIndex].value;

            let esMayorDe18 = validarEdadMayorDe18('birthDate');
            let estadoValidaciones = true;
            const inputs = [
                { field: firstName, message: 'Por favor, ingrese su nombre completo.' },
                { field: lastName, message: 'Por favor, ingrese su apellido completo.' },
                { field: documentID, message: 'Por favor, ingrese su número de documento.' },
                { field: birthDate, message: 'Por favor, ingrese su fecha de nacimiento.' },
                { field: gender, message: 'Por favor, seleccione su género.' },
                { field: address, message: 'Por favor, ingrese su dirección.' },
                { field: mobileNumber, message: 'Por favor, ingrese su número de celular o teléfono.' },
                { field: email, message: 'Por favor, ingrese su correo electrónico.' },
                { field: userRegister, message: 'Por favor, ingrese su usuario.' },
                { field: password, message: 'Por favor, ingrese su contraseña.' },
                { field: confirmPassword, message: 'Por favor, ingrese la confirmación de su contraseña.' }
            ];

            for (let i = 0; i < inputs.length; i++) {
                if (!inputs[i].field) {
                    Swal.fire({
                        text: inputs[i].message,
                        confirmButtonColor: '#008dc9'
                    });
                    estadoValidaciones = false;
                    return;
                }
            }

            if (!CheckPass(password)) {
                Swal.fire({
                    text: `La contraseña no cumple con los requisitos.`,
                    confirmButtonColor: '#008dc9'
                });
                estadoValidaciones = false;
                return;
            }

            if (confirmPassword != password) {
                Swal.fire({
                    text: `Las contraseñas no coinciden.`,
                    confirmButtonColor: '#008dc9'
                });
                estadoValidaciones = false;
                return;
            }

            if (!esMayorDe18) {
                Swal.fire({
                    text: `No tienes la mayoría de edad, ponte en contacto con soporte.`,
                    confirmButtonColor: '#008dc9'
                });
                estadoValidaciones = false;
                return;
            }
            if (!validarEmail(email)){
                Swal.fire({
                    text: `El correo electrónico no es valido.`,
                    confirmButtonColor: '#008dc9'
                });
                estadoValidaciones = false;
                return;
            }
            const data = {
                uID: 0,
                utID: 3,
                uName: firstName,
                ulastName: lastName,
                uDocument: documentID,
                uAddress: address,
                uCellphone: mobileNumber,
                uEmailAddress: email,
                uLoginName: userRegister,
                uPassword: password,
                dtID: documentType,
                uStatus: true,
                gID: parseInt(gender),
                oID: 1,
                uBirthDate: birthDate
            };
            //debugger;
            if (estadoValidaciones) {
                $.ajax({
                    type: 'POST',
                    url: '@ViewBag.urlEndPoint' + '/api/Users/v1/CreateUpdateUsers',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: (response) => {
                        if (response.codeStatus == 0) {
                            Swal.fire({
                                icon: 'success',
                                title: response.messageStatus,
                                confirmButtonColor: '#008dc9',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '@Url.Action("Login", "Account")';
                                }
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.messageStatus,
                                icon: 'error',
                                confirmButtonText: 'Aceptar'
                            });
                        }
                    },
                    error: () => {
                        Swal.fire({
                            title: 'Error',
                            text: 'Ha ocurrido un error al intentar registrar el usuario.',
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });
                    }
                });
            }
        }



    </script>
    <script src="~/assets/js/registerutilities.js"></script>

    }




