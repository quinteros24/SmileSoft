@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


<div class="container mt-5">
    <h1 class="mb-4">Gestión de Citas</h1>


    <div class="row">
        <div class="col-md-6">
            <!-- Calendario de Citas -->

            <div class="card mb-4">
                <div class="card-header">
                    Calendario de Citas
                </div>
                <div class="card-body">
                    <div id="calendar"></div>
                    <!-- Aquí puedes agregar un calendario o un componente de calendario -->
                    <!-- Por ejemplo, puedes usar FullCalendar.io o Bootstrap Datepicker -->
                    <!-- Añade el código necesario para mostrar y gestionar las citas -->
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <!-- Lista de Citas Programadas -->
            <div class="card">
                <div class="card-header">
                    Citas Programadas
                </div>
                <div class="card-body">

                   
                        <!-- Aquí va la tabla -->
                        <div class="table-responsive shadow-lg">
                        <table id="Appoinments" class="table table-hover non-hover mt-2 mb-2 table-striped display" width="100%"></table>
                        </div>
                        
                    
                    @* <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Hora</th>
                                <th>Paciente</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Aquí puedes iterar a través de las citas y mostrarlas en filas de la tabla -->
                            <tr>
                                <td>2023-08-20</td>
                                <td>10:00 AM</td>
                                <td>Nombre del Paciente</td>
                                <td>Programada</td>
                                <td>
                                    <!-- Agregar botones de acciones, por ejemplo: -->
                                    <button type="button" class="btn btn-sm btn-primary" onclick="abrirCita()">Abrir</button>
                                    <button type="button" class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#editModal">Editar</button>

                                </td>
                            </tr>
                            <!-- Puedes agregar más filas de citas aquí -->
                        </tbody>
                    </table> *@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Editar de Cita</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="username" class="form-label">Usuario</label>
                            <input type="text" class="form-control" id="username" name="username" disabled>
                        </div>
                        <div class="form-group">
                            <label for="estadodeCita">Estado de la Cita</label>
                            <select class="form-control" id="tipoUsuarioe" name="estadodeCita" required>
                                <option value="1">Pendiente</option>
                                <option value="2">Programada</option>
                                <option value="3">Cancelada</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" id="saveChangesBtn">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </div>

    @section Scripts{
        <script>

            function abrirCita() {
                window.location.href = '@Url.Action("AdministrarCitas", "Doctor")';
            } //SetAppointment
            $.ajax({
                url: sessionStorage.urlEP + '/api/Users/v1/GetAppointmentsList',
                type: 'GET',
                contentType: "application/json",
                dataType: 'json',
                success: function (data) {
                    $("#loadingScreen").hide();
                    //console.log("Respuesta del Servidor " + data);
                    // Procesar los datos recibidos y agregar filas a la tabla
                    let dataSet = [];

                    
                    $.each(data.itemJson, function (index, usuario) {
                       //Datos de las Citas
                        ];
                        dataSet.push(rowData);
                    });

                    // Inicializa o actualiza el DataTable con los datos procesados
                    table = $('#Appoinments').DataTable({
                        // new DataTable('#example', {
                        columnDefs: [
                            {
                                target: 0,
                                visible: false,
                                searchable: false
                            // },
                            // {
                            //     target: 1,
                            //     visible: false
                            // },
                            // {
                            //     target: 9,
                            //     visible: false
                            // },
                            // {
                            //     target: 7,
                            //     visible: false
                            // }
                        ],
                        columns: [
                            { title: 'ID', visible: false },
                            { title: 'Rol', visible: false },
                            { title: 'Usuario' },
                            // { title: 'Nombre' },
                            // { title: 'Apellidos' },
                            // { title: 'Correo Electronico' },
                            // { title: 'Celular' },
                            // { title: 'Tipo Documento', visible: false },
                            // { title: 'Documento' },
                            // { title: 'Bloqueado', visible: false },
                            // { title: 'Estado' },
                            {
                                title: 'Acciones',
                                orderable: false, // Para desactivar la ordenación en esta columna
                                data: null, // Usaremos la columna "Acciones" solo para botones
                                defaultContent: '<button class="btn btn-primary btn-sm" id="btnEditar" data-toggle="modal" data-target="#editModal" data-toggle="tooltip" title="Editar Cita"><i class="fas fa-edit"></i></button>' +
                                    '<button class="btn btn-success btn-sm deactivate-button" id="btnDesactivar" data-toggle="modal" data-target="#deactivateModal" data-toggle="tooltip" title="Cancelar Cita" > <i class="fas fa-ban"> </i></button > ' +
                                    '<button class="btn btn-danger btn-sm password-button" id="btnPassword" data-toggle="modal" data-target="#passwordModal" data-toggle="tooltip" title="Iniciar Cita" > <i class="fa-solid fa-lock"></i></button > '

                            }
                        ],

                        data: dataSet,
                        dom: 'Bfrtip',
                        "dom": "<'dt--top-section'<'row'<'col-sm-12 col-md-6 d-flex justify-content-md-start justify-content-center'B><'col-sm-12 col-md-6 d-flex justify-content-md-end justify-content-center mt-md-0 mt-3'f>>>" +
                            "<'table-responsive'tr>" +
                            "<'dt--bottom-section d-sm-flex justify-content-sm-between text-center'<'dt--pages-count  mb-sm-0 mb-3'i><'dt--pagination'p>>",
                        buttons: {
                            buttons: [
                                { extend: 'copy', className: 'btn btn-sm' },
                                {
                                    extend: 'print', className: 'btn btn-sm',
                                    messageTop: 'Tabla de Usuarios SmileSoft',
                                },
                                {
                                    extend: 'spacer',
                                    style: 'bar',
                                    text: 'Exportar a:'
                                },
                                { extend: 'csv', className: 'btn btn-sm' },
                                { extend: 'excel', className: 'btn btn-sm' },
                            ]
                        },
                        select: true,
                        destroy: true,
                        language: {
                            url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
                        },

                    });


                    Swal.close();
                    table.column(11).nodes().to$().find('#btnEditar').click(function () {
                        // Maneja la acción del botón aqui
                        let data = table.row($(this).parents('tr')).data();

                        let userId = data[0]; // la primera columna contiene el ID del usuario

                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $.ajax({
                            url: sessionStorage.urlEP + '/api/Users/v1/GetUserDetails',
                            type: 'GET',
                            data: { 'uID': userId },
                            contentType: "application/json",
                            dataType: 'json',
                            success: function (data) {
                                console.log("Cargando Respuesta")
                                console.log(data);

                                if (data.itemJson === null) {
                                    console.log("No se cargo correctamente");
                                } else {
                                    // Mostrar los datos en la consola o realizar otras acciones
                                    let userData = data.itemJson[0]; // Accede al primer elemento del arreglo

                                    // Llama a una funcion para actualizar el formulario con los datos recibidos
                                    console.log("Actualizando Formulario")
                                    actualizarFormulario(userData);
                                }
                            },
                            error: function (error) {
                                console.log('Error al obtener los detalles del usuario.');
                            }
                        });

                        // Funcion para actualizar el formulario con los datos del usuario
                        function actualizarFormulario(userData) {
                            let StatusMapping = {
                                0: 'Activo',
                                1: 'Inactivo'
                            };

                            // Rellena los campos del formulario con los datos del usuario
                            //Datos Personales
                            $("#editNombre").val(userData.uName);
                            $("#editApellido").val(userData.uLastName);
                            $("#tipoDocumentoe").val(userData.dtID);
                            $("#editDocumentoe").val(userData.uDocument);
                            $("#tipoGeneroe").val(userData.gID)
                            $("#fechaNacimientoe").val(userData.uBirthDate)
                            //Datos de Contacto
                            $("#editCorreo").val(userData.uEmailAddress);
                            $("#direccione").val(userData.uAddress);
                            $("#editCelular").val(userData.uCellphone);
                            //Datos de Cuenta
                            $("#tipoUsuarioe").val(userData.utID);
                            $("#username").val(userData.uLoginName);

                            //Datos de Estudios
                            $("#TituloAcademico").val(userData.dDegree);
                            $("#AcademicLevel").val(userData.dAcademicLevel);
                            $("#Speciality").val(userData.dSpeciality);
                            $("#ProfessionalLicense").val(userData.dProfessionalCard);
                            $("#Universityname").val(userData.dUniversityName);

                        }

                        // Abre el modal de edición
                        $("#editModal").modal("show");


                        //console.log("Usuario a Editar" + userId);
                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $("#saveChangesBtn").click(function () {
                            let status = $("#editStatus").val() == "Activo" ? true : false;
                            let DoctorModel = {
                                //Datos de Estudios
                                dAcademicLevel: $("#AcademicLevel").val(),
                                dDegree: $("#TituloAcademico").val(),
                                dSpeciality: $("#Speciality").val(),
                                dProfessionalCard: $("#ProfessionalLicense").val(),
                                dUniversityName: $("#Universityname").val(),
                            };

                            console.log("DoctorModel" + DoctorModel.dAcademicLevel);
                            // Obtén los datos actualizados del formulario de edición
                            let updatedUserData = {
                                // Recoge los datos actualizados desde los campos del formulario
                                //Datos Personales
                                uName: $("#editNombre").val(),
                                uLastName: $("#editApellido").val(),
                                dtID: parseInt($("#tipoDocumentoe").val()),
                                uDocument: $("#editDocumento").val(),
                                //gID: 1,
                                //uBirthDate: $("#birthDate").val(),
                                //Datos de Contacto
                                uEmailAddress: $("#editCorreo").val(),
                                uCellphone: $("#editCelular").val(),
                                uAddress: $("#address").val(),

                                //Datos de Cuenta
                                uLoginName: $("#username").val(),
                                uID: userId,
                                utID: parseInt($("#tipoUsuarioe").val()),
                                uStatus: status,
                                DoctorModel: null
                            }
                            if (updatedUserData.utID == 2) {
                                updatedUserData.DoctorModel = DoctorModel;
                            }
                            console.log("Datos del Usuario " + updatedUserData);


                            console.log("Usuario a Editar" + updatedUserData.gID)
                            // Realiza una solicitud AJAX para guardar los cambios en el servidor
                            $.ajax({
                                url: sessionStorage.urlEP + '/api/Users/v1/CreateUpdateUsers', // Reemplaza con la URL correcta
                                type: 'POST',
                                data: JSON.stringify(updatedUserData), // Convierte updatedUserData a JSON
                                contentType: "application/json", // Especifica el tipo de contenido
                                dataType: "json",
                                success: function (response) {
                                    // Cierra el modal de edición
                                    $("#editModal").modal("hide");
                                    //verusers(updatedUserData.utID);
                                    // Puedes realizar otras acciones después de guardar los cambios si es necesario
                                    // Por ejemplo, actualizar la tabla con los datos modificados
                                    // o mostrar un mensaje de éxito
                                },
                                error: function () {
                                    $("#editModal").modal("hide");
                                    Swal.fire({
                                        title: 'Error',
                                        text: 'Error al guardar los cambios',
                                        icon: 'error',
                                        confirmButtonText: 'Aceptar'
                                    });
                                }
                            });
                        });
                    });

                    //Desactivar Estado --> Funcionando Bien
                    table.column(11).nodes().to$().find('#btnDesactivar').click(function () {
                        let StatusMappingI = {
                            Activo: 1,
                            Inactivo: 0
                        };


                        let rolesMappingI = {
                            Administrador: 1,
                            Doctores: 2,
                            Pacientes: 3
                        };
                        let data = table.row($(this).parents('tr')).data();
                        let userId = data[0];
                        let utID = data[1];
                        let loginName = data[2];
                        let userName = data[3] + ' ' + data[4];
                        let StatusI = StatusMappingI[data[10]]; // Supongo que obtienes el estado del usuario de alguna parte
                        let estadoActual = data[10];
                        console.log("Documento" + loginName + " User ID: " + userId);
                        console.log("Estado" + estadoActual);
                        console.log("Estado Mapeado " + StatusI)
                        let action = StatusI === 1 ? 'desactivar' : 'activar';
                        let uRol = rolesMappingI[utID];
                        // Muestra un mensaje de confirmación antes de realizar la acción
                        Swal.fire({
                            title: 'Estas seguro de ' + action + ' a:',
                            text: ' ' + userName + ' !',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Si, ' + action,
                            cancelButtonText: 'Cancelar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                let newStatus = StatusI === 1 ? 0 : 1;

                                // Realiza la solicitud AJAX para cambiar el estado del usuario
                                $.ajax({
                                    url: sessionStorage.urlEP + '/api/Users/v1/SetUserStatus/',
                                    type: 'GET',
                                    data: { 'uID': userId, 'uStatus': newStatus },
                                    contentType: "application/json",
                                    dataType: 'json',
                                    success: function (response) {
                                        console.log("Respuesta del Servidor " + response);
                                        console.log("Rol del Usuario desactivado " + uRol);
                                        Swal.fire({
                                            title: 'Usuario ' + action.charAt(0).toUpperCase() + action.slice(1), // Capitalizar la acción
                                            text: 'El usuario ' + loginName + ' se ' + action + 'ó correctamente',
                                            icon: 'success',
                                            confirmButtonText: 'Aceptar'
                                        });
                                        verusers(uRol);
                                    },
                                    error: function () {
                                        Swal.fire({
                                            title: 'Error',
                                            text: 'Error al ' + action + ' el usuario',
                                            icon: 'error',
                                            confirmButtonText: 'Aceptar'
                                        });
                                    }
                                });
                            }
                        });



                        //// Maneja la acción de desactivación aqui
                        //let data = table.row($(this).parents('tr')).data();
                        //let userId = data[0];
                        //let loginName = data[2];
                        //let userName = data[3] + ' ' + data[4];

                        //console.log("Documento" + loginName + " User ID: " + userId);
                        ////var userId = data[0]; // Obtén el ID del usuario desde el botón
                        //let dataUser = {
                        //    uID: userId,
                        //    uStatus: 0
                        //}; //Ajustar para enviar si esta inactivo activar si esta activo desactivar
                        //// Muestra un mensaje de confirmación antes de desactivar el usuario

                        //Swal.fire({
                        //    title: 'Estas seguro de Desactivar? a:',
                        //    text: ' ' + userName + ' !',
                        //    icon: 'warning',
                        //    showCancelButton: true,
                        //    confirmButtonColor: '#3085d6',
                        //    cancelButtonColor: '#d33',
                        //    confirmButtonText: 'Si, desactivar',
                        //    cancelButtonText: 'Cancelar'
                        //}).then((result) => {
                        //    if (result.isConfirmed) {
                        //        //console.log("Desactivar 2" + userId);
                        //        // Realiza la solicitud AJAX para desactivar el usuario
                        //        $.ajax({
                        //            url: sessionStorage.urlEP + '/api/Users/v1/SetUserStatus/',
                        //            type: 'POST',
                        //            data: JSON.stringify(dataUser),
                        //            contentType: "application/json",
                        //            //async: false,
                        //            dataType: "json",
                        //            success: function (response) {
                        //                console.log("Respuesta del Servidor " + response);

                        //                Swal.fire({
                        //                    title: 'Usuario Desactivado',
                        //                    text: 'El usuario' + data[0] + 'se desactivó correctamente',
                        //                    icon: 'success',
                        //                    confirmButtonText: 'Aceptar'
                        //                });


                        //            },
                        //            error: function () {
                        //                Swal.fire({
                        //                    title: 'Error',
                        //                    text: 'Error al deshabilitar el usuario',
                        //                    icon: 'error',
                        //                    confirmButtonText: 'Aceptar'
                        //                });
                        //            }
                        //        });
                        //    }
                        //});

                    });
                    //Cambiar contraseña Estado --> Funcionando Bien
                    table.column(11).nodes().to$().find('#btnPassword').click(function () {
                        // Maneja la acción del botón aqui
                        let data = table.row($(this).parents('tr')).data();

                        let userId = data[0]; // Supongamos que la primera columna contiene el ID del usuario
                        console.log("contraseña " + userId)
                        let userNameEdit = data[3] + ' ' + data[4];
                        let userRol = data[1];
                        let rolesMappingI = {
                            Administrador: 1,
                            Doctores: 2,
                            Pacientes: 3
                        };
                        let uRol = rolesMappingI[userRol];
                        //$("#usernamepass").val(userNameEdit);
                        var userNamePassSpan = document.getElementById("userNamePass");

                        // Establece el contenido del span
                        userNamePassSpan.innerHTML = userNameEdit;
                        // Abre el modal de edición
                        $("#editPassword").modal("show");


                        console.log("Usuario a Editar" + userId);
                        // Realiza una solicitud AJAX para obtener los detalles del usuario

                        $("#changePasswordBtn").click(function () {

                            let password = $("#newPassword").val();
                            if (!CheckPass(password)) {
                                Swal.fire({
                                    text: 'La contraseña no cumple con los requisitos.',
                                    confirmButtonColor: '#008dc9'
                                });
                            } else {
                                // Obtén los datos actualizados del formulario de edición
                                let updatedUserData = {
                                    // Recoge los datos actualizados desde los campos del formulario
                                    uID: userId,
                                    Password: password
                                };
                                // Realiza una solicitud AJAX para guardar los cambios en el servidor
                                $.ajax({
                                    url: sessionStorage.urlEP + '/api/Users/v1/ChangePassword', // Reemplaza con la URL correcta
                                    type: 'POST',
                                    data: JSON.stringify(updatedUserData), // Convierte updatedUserData a JSON
                                    contentType: "application/json", // Especifica el tipo de contenido
                                    dataType: "json",
                                    success: function (response) {
                                        // Cierra el modal de edición
                                        if (response.codeStatus == 0) {
                                            $("#editPassword").modal("hide");
                                            //window.location.href = '@Url.Action("Index", "")';
                                            Swal.fire({
                                                text: 'contraseña actualizada con exito',
                                                confirmButtonColor: '#008dc9'
                                            });
                                            verusers(uRol);
                                        } else {

                                            Swal.fire({
                                                text: "Hubo un fallo" + response.messageStatus,
                                                confirmButtonColor: '#008dc9'
                                            });
                                            //alert('Inicio de sesión fallido, ' + response.messageStatus);
                                        }


                                        // Puedes realizar otras acciones después de guardar los cambios si es necesario
                                        // Por ejemplo, actualizar la tabla con los datos modificados
                                        // o mostrar un mensaje de éxito
                                    },
                                    error: function () {
                                        // $("#editModal").modal("hide");
                                        // Swal.fire({
                                        //     title: 'Error',
                                        //     text: 'Error al guardar los cambios',
                                        //     icon: 'error',
                                        //     confirmButtonText: 'Aceptar'
                                        // });
                                    }
                                });
                            }
                        });
                    });

                }
            });
         
        </script>

    }
